<template>
  <div class="video-list">
    <div class="header">
      <div class="btn-group-inline">
        <div class="icons">
          <div class="icon-item back" @click="$router.back()" :title="$t('back')"></div>
        </div>
      </div>
      <!--<label class="head-text">{{ $t('category') }}</label>-->
      <!--<el-select v-model="category" slot="append" class="select" @change="changeCategory">-->
      <!--<el-option-->
      <!--v-for="item in categoryOptions[0].options"-->
      <!--:key="item.id"-->
      <!--:label="item.name"-->
      <!--:value="item.id">-->
      <!--</el-option>-->
      <!--<el-option-group-->
      <!--:key="categoryOptions[1].label"-->
      <!--:label="categoryOptions[1].label">-->
      <!--<el-option-->
      <!--v-for="item in categoryOptions[1].options"-->
      <!--:key="item.id"-->
      <!--:label="item.name"-->
      <!--:value="item.id">-->
      <!--</el-option>-->
      <!--</el-option-group>-->
      <!--<el-option-->
      <!--v-for="item in categoryOptions[2].options"-->
      <!--:key="item.id"-->
      <!--:label="item.name"-->
      <!--:value="item.id">-->
      <!--</el-option>-->
      <!--</el-select>-->
    </div>
    <div class="table-wrap">
      <table class="table-content" border="0" cellspacing="0" cellpadding="0">
        <thead>
          <tr>
            <td v-for="item in tableHead">
              {{ item }}
            </td>
          </tr>
        </thead>
        <tbody>
          <tr v-for="item in videoList">
            <td>{{ item.name }}</td>
            <td>{{ item.category | videoCategoryType }}</td>
            <td>
              <a class="btn-underline" @click="preview(item)">{{ $t("preview") }}</a>
              <!--<a class="btn-underline" :href="item.file | getFileUrl('')"-->
              <!--:download="item.name">{{ $t('download') }}</a>-->
            </td>
          </tr>
        </tbody>
      </table>
      <div class="no-data-content" v-show="videoList.length <= 0">
        {{ $t("noResult") }}
      </div>
      <!--<div class="table-footer">-->
      <!--<el-pagination-->
      <!--@current-change='handleCurrentChange'-->
      <!--:current-page.sync=currentPage-->
      <!--:page-size="10"-->
      <!--layout="prev, pager, next"-->
      <!--:total="total"-->
      <!--v-if="footerShow">-->
      <!--</el-pagination>-->
      <!--<p class="total">{{ $t('total') }}: {{total}}</p>-->
      <!--</div>-->
    </div>

    <!--预览弹窗-->
    <el-dialog
      :title="selectVideo.name"
      custom-class="video-dialog"
      :visible.sync="dialogPreviewVisible"
      :before-close="closeVideoDialog"
    >
      <div class="dialog-container">
        <iframe
          :src="selectVideo.file"
          frameborder="0"
          class="video-iframe"
          v-if="dialogPreviewVisible"
        >
        </iframe>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import Core from "core/core";
import ZH from "src/assets/lang/zh";
import EN from "src/assets/lang/en";
import DE from "src/assets/lang/de";
import NL from "src/assets/lang/nl";
import FR from "src/assets/lang/fr";

export default {
  name: "VideoList",
  data() {
    return {
      categoryOptions: [
        {
          options: [{ id: 0, name: "All" }],
        },
        {
          label: "System Error",
          options: [
            { id: 1, name: "LCD" },
            { id: 2, name: "LED" },
          ],
        },
        {
          options: [
            { id: 3, name: "HMI" },
            { id: 4, name: "Motor" },
            { id: 5, name: "Controller" },
            { id: 6, name: "Sensor" },
            { id: 7, name: "Battery" },
            { id: 8, name: "Charger" },
          ],
        },
      ],
      category: 0,
      tableHead: ["Name", "Category", "Operation"],
      currentPage: 1,
      total: 0,
      upload: {
        url: Core.Const.NET.FILE_UPLOAD_END_POINT,
        paramName: "file",
        params: { token: Core.Data.getToken() },
      },
      fileList: [],
      videoList: [],
      footerShow: true,
      selectVideo: "",
      dialogPreviewVisible: false,

      errorCodeList: [],
      errorCodeId: 1,
    };
  },

  i18n: {
    messages: {
      fr: FR.Component.Product.VideoList,
      en: EN.Component.Product.VideoList,
      zh: ZH.Component.Product.VideoList,
      de: DE.Component.Product.VideoList,
      nl: NL.Component.Product.VideoList,
    },
  },

  mounted: function () {
    this.itemId = this.$route.query.itemId;
    this.getItemVideoList(this.itemId);
    // 国际化
    this.tableHead = [this.$t("name"), this.$t("category"), this.$t("operation")];
    let vm = this;
    this.$root.eventHub.$on(Core.Const.DATA.KEY_I18N_UPDATE, () => {
      setTimeout(() => {
        vm.tableHead = [vm.$t("name"), vm.$t("Category"), vm.$t("Operation")];
      }, 100);
    });

    this.getComponentErrorList();
  },

  methods: {
    // changeCategory() {
    //     if (this.category === 0) {
    //         this.getVideoList();
    //         return;
    //     }
    //     Core.Api.Component.getVideoListByCategory(this.category).then(res => {
    //         this.videoList = res.list;
    //         this.total = res.list.length;
    //         this.footerShow = false;
    //     });
    //
    // },
    //
    // handleCurrentChange(val) {
    //     this.getVideoList();
    // },

    getItemVideoList(id) {
      Core.Api.Item.videoList(id).then((res) => {
        if (res.video_list !== null && res.video_list !== []) {
          this.videoList = res.video_list;
        }
      });
    },

    preview(item) {
      this.selectVideo = item;
      this.dialogPreviewVisible = true;
    },

    closeVideoDialog() {
      this.selectVideo = {};
      this.dialogPreviewVisible = false;
    },

    getComponentErrorList() {
      Core.Api.Error.componentErrorList().then((res) => {
        this.errorCodeList = res.error_list;
      });
    },
  },
};
</script>

<style lang="scss" rel="stylesheet/scss">
.video-list {
  width: 100%;
  height: 100%;
  .head-text {
    color: #a1a5b1;
    margin: 0 15px;
  }
  .label {
    color: white;
    width: 100px;
    display: inline-block;
    margin-right: 15px;
  }
  .video-dialog {
    width: 650px;
    .dialog-container {
      font-size: 0;
      .video-iframe {
        width: 650px;
        height: 360px;
      }
    }
  }
}
</style>



// WEBPACK FOOTER //
// video-list.vue?143dfabc