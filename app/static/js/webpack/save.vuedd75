<template>
  <div class="assembler-order-save">
    <div class="header">
      <div class="btn-group-inline">
        <div class="icons">
          <div class="icon-item back" @click="goOrderList" :title="$t('back')"></div>
        </div>
      </div>
      <label class="title">{{ title }}</label>
    </div>
    <div class="content-wrap">
      <div class="content">
        <div class="order-info">
          <label class="title">{{ $t("orderInfo") }}</label>
          <div class="left">
            <div class="item">
              <label class="label">{{ $t("poNo") }}<span class="required">*</span></label>
              <el-input class="input" v-model="poNo"></el-input>
            </div>
            <div class="item">
              <label class="label"
                >{{ $t("customerName") }}<span class="required">*</span></label
              >
              <el-select
                class="input-left"
                v-model="customerName"
                clearable
                :placeholder="$t('customerName')"
              >
                <el-option
                  v-for="item in orgList"
                  :key="item.name"
                  :label="item.name"
                  :value="item.name"
                >
                </el-option>
              </el-select>
            </div>
            <div class="item">
              <label class="label">{{ $t("note") }}</label>
              <el-input class="input-note" v-model="note"></el-input>
            </div>
          </div>
          <div class="parts-list">
            <label class="labelList">{{ $t("itemList") }}</label>
            <el-button type="primary" class="att-btn" @click="dialogCreateVisible = true"
              >+</el-button
            >
            <label class="labelAdd">{{ $t("addItem") }}</label>
          </div>
        </div>
        <div class="table-wrap">
          <table class="table-content" border="0" cellspacing="0" cellpadding="0">
            <thead>
              <td>
                <el-checkbox v-model="allSelectedForDelete"></el-checkbox>
              </td>
              <td v-for="item in tableHead">{{ item }}</td>
            </thead>
            <tbody>
              <tr v-for="(item, index) in orderItems">
                <td>
                  <el-checkbox
                    class="table-checkbox"
                    v-model="item.selected"
                  ></el-checkbox>
                </td>
                <td>{{ item.name || item.item_name }}</td>
                <td>{{ item.part_no }}</td>
                <td>
                  <el-input-number
                    class="input-number"
                    v-model="item.amount"
                    :min="item.produced || 1"
                  ></el-input-number>
                </td>
                <td>
                  <a class="btn-underline" v-on:click="deleteItem(index)">{{
                    $t("delete")
                  }}</a>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="footer">
          <el-button type="delete" @click="deleteOrderItem">{{ $t("delete") }}</el-button>
        </div>

        <el-dialog
          class="dialog"
          :title="$t('addItem')"
          :visible.sync="dialogCreateVisible"
          size="large"
          top="10%"
        >
          <div class="content">
            <div class="header">
              <el-select
                v-model="search.org_id"
                placeholder="select company"
                @change="getBrandListById"
                class="brand-select"
                v-if="!orderId"
              >
                <el-option
                  v-for="item in orgList"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                >
                </el-option>
              </el-select>
              <el-select
                v-model="search.brand_id"
                :placeholder="$t('brandPlaceholder')"
                @change="queryOrderItem"
                class="brand-select"
              >
                <el-option
                  v-for="item in brandList"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id"
                >
                </el-option>
              </el-select>
              <el-input
                :placeholder="$t('modelName')"
                class="search-content"
                v-model="search.query"
              >
              </el-input>
              <div class="btn-group-inline">
                <div class="icons">
                  <div
                    class="icon-item search"
                    @click="queryOrderItem"
                    :title="$t('search')"
                  ></div>
                </div>
              </div>
            </div>
            <div class="table-wrap">
              <table class="table-content" border="0" cellspacing="0" cellpadding="0">
                <thead>
                  <td>
                    <el-checkbox v-model="allSelectedForAdd"></el-checkbox>
                  </td>
                  <td v-for="item in itemHead">{{ item }}</td>
                </thead>

                <tbody>
                  <tr v-for="(item, index) in selectItems">
                    <td>
                      <el-checkbox
                        class="table-checkbox"
                        v-model="item.selected"
                      ></el-checkbox>
                    </td>
                    <td><img :src="item.img | getImgUrl" /></td>
                    <td>{{ item.name }}</td>
                    <td>{{ item.ext_part_no }}</td>
                  </tr>
                </tbody>
              </table>

              <el-pagination
                class="pagination"
                @current-change="handleCurrentPageChange"
                :current-page.sync="currentPage"
                :page-size="10"
                layout="prev, pager, next"
                :total="total"
              >
              </el-pagination>
            </div>
            <div class="footer">
              <el-button type="primary" @click="addItems">{{ $t("addItems") }}</el-button>
            </div>
          </div>
        </el-dialog>
        <div class="footer">
          <el-button type="primary" @click="createOrder">{{ $t("saveOrder") }}</el-button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import Core from "core/core";
import ZH from "src/assets/lang/zh";
import EN from "src/assets/lang/en";
import DE from "src/assets/lang/de";
import NL from "src/assets/lang/nl";
import FR from "src/assets/lang/fr";

export default {
  data() {
    return {
      org: Core.Data.getOrg(),
      brandOrg: "",
      tableHead: ["Name", "Article No.", "Quantity", "Operation"],
      itemHead: ["Image", "Name", "Article No."],

      queryItemList: [],
      orderItems: [],
      selectItems: [],

      orderId: 0,
      poNo: "",
      customerName: "",
      customerPo: "",
      customerPartNo: "",
      note: "",

      allChecked: false,
      currentPage: 1,
      total: 0,
      dialogCreateVisible: false,
      title: "",
      orgList: [],
      brandList: [],
      search: {
        org_id: "",
        brand_id: "",
        query: "",
      },
    };
  },

  i18n: {
    messages: {
      fr: FR.Assembler.AssemblerOrderSave,
      en: EN.Assembler.AssemblerOrderSave,
      zh: ZH.Assembler.AssemblerOrderSave,
      de: DE.Assembler.AssemblerOrderSave,
      nl: NL.Assembler.AssemblerOrderSave,
    },
  },

  computed: {
    allSelectedForAdd: {
      get: function () {
        return this.selectItems.reduce(function (prev, curr) {
          return prev && curr.selected;
        }, true);
      },
      set: function (newValue) {
        this.selectItems.forEach((item) => {
          item.selected = newValue;
        });
      },
    },
    allSelectedForDelete: {
      get: function () {
        return this.orderItems.reduce(function (prev, curr) {
          return prev && curr.selected;
        }, true);
      },
      set: function (newValue) {
        this.orderItems.forEach((item) => {
          item.selected = newValue;
        });
      },
    },
  },

  mounted: function () {
    this.initData();
    this.$root.eventHub.$on(Core.Const.DATA.KEY_I18N_UPDATE, () => {
      setTimeout(() => {
        this.initData();
      }, 100);
    });

    this.orderId = this.$route.query.orderId || 0;
    this.brandOrg = Core.Data.getBrandPartner(this.org.id);
    this.title = this.$t("createOrder");
    if (this.orderId) {
      this.title = this.$t("editOrder");
      Core.Api.Order.getProductionOrderDetail(this.orderId).then((res) => {
        let order = res.order;
        this.poNo = order.source_id;
        this.customerName = order.customer_id;
        this.brandOrg = order.user_org;
        this.search.org_id = this.brandOrg.id;
        this.getBrandListById();
        this.customerPo = order.customer_po_no;
        this.customerPartNo = order.customer_part_no;
        this.note = order.remark;
        let orderItems = order.item_list;
        orderItems.forEach((orderItem) => {
          this.orderItems.push({
            item_id: orderItem.item_id,
            item_name: orderItem.item_name,
            amount: orderItem.amount,
            produced: orderItem.produced,
            part_no: orderItem.item_part_no,
            selected: false,
          });
        });
      });
    }

    // 获取all brand org list
    this.getAllBrandList();

    // 获取all brand list
    //            this.getBrandListById();
  },

  methods: {
    initData() {
      this.tableHead = [
        this.$t("tableHead.name"),
        this.$t("tableHead.partNo"),
        this.$t("tableHead.quantity"),
        this.$t("tableHead.operation"),
      ];
      this.itemHead = [
        this.$t("itemHead.image"),
        this.$t("itemHead.name"),
        this.$t("itemHead.partNo"),
      ];
    },

    // 获取所有的品牌商
    getAllBrandList() {
      Core.Api.Org.getAllPartnerBranList().then((res) => {
        this.orgList = res.org_list;
        this.customerName = this.brandOrg ? this.brandOrg.name : "";
        this.search.org_id = this.brandOrg ? this.brandOrg.id : "";

        if (this.search.org_id) {
          this.getBrandListById();
        }
      });
    },

    // 获取所有的品牌列表
    getBrandListById() {
      this.search.brand_id = "";
      Core.Api.Brand.getBrandListById(this.search.org_id).then((res) => {
        this.brandList = res.brand_list;
      });
    },

    goOrderList() {
      this.$router.push({ path: "list" });
    },

    deleteItem(index) {
      this.orderItems.splice(index, 1);
    },

    addItems() {
      this.selectItems.forEach((item, index) => {
        if (item.selected === true) {
          let isAdded = false;
          this.orderItems.forEach((orderItem) => {
            if (orderItem.item_id === item.id) {
              isAdded = true;
            }
          });
          if (!isAdded) {
            let addItem = this.selectItems[index];
            this.orderItems.push({
              item_id: addItem.id,
              item_name: addItem.name,
              part_no: addItem.ext_part_no,
              amount: 1,
              selected: false,
            });
          }
        }
      });
      this.closeChooseItem();
    },

    closeChooseItem() {
      this.selectItems = [];
      this.queryItemList = [];
      this.search.brand_id = "";
      this.search.query = "";

      //	            this.dialogCreateVisible = false;
    },

    createOrder() {
      // if (this.brandOrg === null) {
      //     this.$message({
      //         message: "You should choose your brand partner first",
      //         type: 'error'
      //     });
      // return;
      // }
      let orderItems = [];
      console.log(this.orderItems);
      if (this.orderItems.length > 0) {
        this.orderItems.forEach((orderItem) => {
          orderItems.push({
            id: orderItem.item_id,
            amount: orderItem.amount,
          });
        });
      }
      if (!this.checkParams()) {
        return;
      }

      Core.Api.Order.productionOrderSave(
        this.orderId,
        this.poNo,
        this.customerName,
        this.customerPartNo,
        this.customerPo,
        this.brandOrg.id,
        this.note,
        JSON.stringify(orderItems)
      ).then((res) => {
        this.$message({
          message: "Save Successfully",
          type: "success",
        });
        this.$router.push({ path: "list" });
      });
    },

    checkParams() {
      if (!this.poNo) {
        this.$message({
          message: "Please input Po No.",
          type: "warning",
        });
        return false;
      }

      if (!this.customerName) {
        this.$message({
          message: "Please input customer name",
          type: "warning",
        });
        return false;
      }

      if (!this.orderItems.length) {
        this.$message({
          message: "Please add item",
          type: "warning",
        });
        return false;
      }

      return true;
    },

    queryOrderItem() {
      if (!this.search.brand_id) {
        return;
      }
      let org = Core.Data.getOrg();
      let partnerBrand = this.brandOrg;
      if (partnerBrand !== null) {
        Core.Api.Item.queryOrderItem(
          partnerBrand.id,
          0,
          this.search.brand_id,
          this.search.query,
          this.currentPage
        ).then((res) => {
          this.queryItemList = res.query;
          this.total = res.count;
          if (!this.queryItemList.length > 0) {
            this.$message({
              message: "There are no matching data",
              type: "warning",
            });
          }
          this.selectItems = [];
          this.queryItemList.forEach((item, index) => {
            let selectItem = {
              selected: false,
              key: index,
              name: item.name,
              img: item.img,
              ext_part_no: item.ext_part_no,
              id: item.id,
            };
            this.selectItems.push(selectItem);
          });
        });
      } else {
        this.$message({
          message: "You should choose your brand partner first",
          type: "error",
        });
        this.$router.push({ name: "assemblerPartner" });
      }
    },

    deleteOrderItem() {
      let deleteIndexs = [];
      this.orderItems.forEach((orderItem, index) => {
        if (orderItem.selected === true) {
          deleteIndexs.unshift(index);
        }
      });
      deleteIndexs.forEach((index) => {
        this.orderItems.splice(index, 1);
      });
    },

    handleCurrentPageChange(page) {
      this.currentPage = page;
      this.queryOrderItem();
    },
  },
};
</script>

<style lang="scss" rel="stylesheet/scss">
.assembler-order-save {
  width: 100%;
  height: 100%;

  .table-wrap {
    width: 100%;
    height: calc(100% - 392px);
    box-shadow: 0 -1px #2b2f3b;
    overflow-x: hidden;
  }
  .content {
    height: 100%;
    border: 1px solid #2b2f3b;
    .order-info {
      width: 100%;
      height: 272px;
      .title {
        height: 50px;
        line-height: 50px;
        padding-left: 40px;
        /*font-size: 14px;*/
      }
      .left {
        float: left;
        width: 100%;
        height: 170px;
        background: #353945;
        box-shadow: 0 -1px #2b2f3b;
        .item {
          margin: 2px 0 0 40px;
          line-height: 60px;
          overflow: hidden;
          height: 50px;
          .label {
            display: inline-block;
            width: 120px;
          }
          .input {
            margin-left: 10px;
            width: 256px;
            border-radius: 0 0 10px 10px;
          }
          .input-left {
            margin-left: 10px;
            width: 200px;
          }
          .input-right {
            width: 200px;
          }
          .input-note {
            margin-left: 10px;
            width: 603px;
          }
        }
      }
      .parts-list {
        float: left;
        padding: 0 40px;
        /*font-size: 12px;*/
        overflow: hidden;
        height: 50px;
        line-height: 50px;
        width: 100%;
        box-shadow: 0 -1px #2b2f3b;
        .labelList {
          /*font-size: 12px;*/
        }
        .att-btn {
          margin-left: 46px;
          padding: 6px 9px;
          min-width: 0;
        }
        .labelAdd {
          margin-left: 14px;
          /*font-size: 12px;*/
        }
      }
    }
    .footer {
      width: 100%;
      line-height: 60px;
      padding-left: 40px;
      box-shadow: 0 -1px #2b2f3b;
      .footer-pagination {
        float: right;
      }
    }
  }
  .dialog {
    .el-dialog--large {
      width: 1100px;
    }
    .header {
      .search-content {
        width: 200px;
      }
      .search-btn {
        position: absolute;
        top: 15px;
        left: 250px;
        width: 30px;
        height: 30px;
      }
    }
  }
  span.required {
    color: #e26829;
    display: inline-block;
    padding-left: 4px;
  }

  .table-wrap {
    .table-content {
      padding-bottom: 0;
    }
    .pagination {
      padding: 10px;
    }
  }
}
</style>



// WEBPACK FOOTER //
// save.vue?02d8f428