<template>
  <div class="order-list">
    <div class="header">
      <el-form :inline="true" class="demo-form-inline">
        <!-- <el-form-item :label="$t('search.poNo')"> -->
        <el-form-item label="Po No.">
          <el-input v-model="sourceId"></el-input>
          <el-input style="display: none"></el-input>
        </el-form-item>
        <el-form-item :label="$t('headData.customerName')">
          <el-input v-model="customerName"></el-input>
        </el-form-item>
        <el-form-item :label="$t('headData.model')">
          <el-input v-model="modelSearch"></el-input>
        </el-form-item>
        <el-form-item :label="$t('headData.status')">
          <el-select v-model="status" @change="log()">
            <el-option
              v-for="item in statusList"
              :key="item.id"
              :label="item.id | orderStatus(Core.Data.getLang())"
              :value="item.id"
            >
            </el-option>
          </el-select>
        </el-form-item>
        <div class="btn-group-inline">
          <div class="icons">
            <div
              class="icon-item search"
              @click="getOrderList"
              :title="$t('search.searchBtn')"
            ></div>
            <div
              class="icon-item add"
              @click="addProductionOrder"
              :title="$t('add')"
              v-if="authList[Core.Const.AUTH_LIST.productionAdd]"
            ></div>
          </div>
        </div>
      </el-form>
    </div>
    <div class="table-wrap">
      <div class="table-content-holder">
        <table class="table-content" border="0" cellspacing="0" cellpadding="0">
          <thead>
            <td
              v-for="(item, index) in headData"
              :class="{ 'al-right': index === 1 || index === 4 }"
            >
              {{ item }}
            </td>
          </thead>
          <tbody v-if="!loading">
            <tr v-for="item in tableData">
              <!--<td class="td" v-for="value in item">{{value}}</td>-->
              <td>{{ item.sn.substr(0, 8) }} - {{ item.sn.substr(8) }}</td>
              <td style="text-align: right">
                {{ item.source_id }}
              </td>
              <td>
                {{ item.customer_id }}
              </td>
              <td class="long-td">
                <span v-for="(model, index) in item.item_list">
                  <label>{{ model.item_name }}--{{ model.item_part_no }}</label>
                  <label v-if="index !== 0">/</label>
                </span>
              </td>
              <td style="text-align: right">{{ item.produced }}/{{ item.amount }}</td>
              <td
                :class="{
                  'order-finish': item.status == 1,
                  'order-doing': item.status == 0,
                }"
              >
                {{ item.status | orderStatus(Core.Data.getLang()) }}
              </td>
              <td>
                <a class="btn-underline" @click.stop="goProductionOrderDetail(item.id)">{{
                  $t("detail")
                }}</a>
                <a
                  class="btn-underline"
                  @click.stop="goToComponentList(item.source_id)"
                  >{{ $t("list") }}</a
                >
                <a
                  class="btn-underline"
                  @click.stop="showDeleteDialog(item)"
                  v-if="authList[Core.Const.AUTH_LIST.productionDelete]"
                  >{{ $t("delete") }}</a
                >
              </td>
            </tr>
          </tbody>
        </table>
        <div class="no-data-content" v-show="tableData.length <= 0 && !loading">
          {{ $t("noResult") }}
        </div>
        <div class="loading" v-if="loading">
          <img src="../../../assets/images/icon/loading-bars.svg" alt="Loading icon" />
        </div>
      </div>

      <div class="table-footer">
        <el-pagination
          @current-change="handleCurrentChange"
          :current-page.sync="currentPage"
          :page-size="10"
          layout="prev, pager, next, jumper"
          :total="total"
        >
        </el-pagination>
        <p class="total">{{ $t("total") }}: {{ total }}</p>
      </div>
    </div>
    <el-dialog
      :title="$t('deleteDialog.title')"
      :visible.sync="dialogDeleteVisible"
      size="tiny"
    >
      <div>
        <span>{{ $t("deleteDialog.content") }}</span>
      </div>
      <br />
      <div>
        <label for="reason">Reason:</label>
        <el-input id="reason" :maxlength="50" v-model="reasonDelete"></el-input>
      </div>

      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click="dialogDeleteVisible = false">{{
          $t("deleteDialog.no")
        }}</el-button>
        <el-button type="success" @click="deleteProductionOrder">{{
          $t("deleteDialog.yes")
        }}</el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>
import Core from "core/core";
import ZH from "src/assets/lang/zh";
import EN from "src/assets/lang/en";
import DE from "src/assets/lang/de";
import NL from "src/assets/lang/nl";
import FR from "src/assets/lang/fr";
import ElInput from "../../../../node_modules/element-ui/packages/input/src/input";

export default {
  components: { ElInput },
  name: "orderList",
  data() {
    return {
      Core: Core,
      headData: [
        "Index",
        "Order No.",
        "Customer Name",
        "Model",
        "Produced/Qty",
        "Status",
        "Operation",
      ],
      tableData: [],
      currentPage: Core.Data.get(Core.Const.DATA.KEY_COMPONENT_ORDER_LIST_PAGE)
        ? Core.Data.get(Core.Const.DATA.KEY_COMPONENT_ORDER_LIST_PAGE)
        : 1,
      total: 0,
      loading: false,
      localPage: 0,

      dialogDeleteVisible: false,
      selectItem: "",
      sourceId: Core.Data.get(Core.Const.DATA.KEY_COMPONENT_ORDER_LIST_CONDITION)
        ? Core.Data.get(Core.Const.DATA.KEY_COMPONENT_ORDER_LIST_CONDITION)
        : "",

      authList: [],

      customerName: "",
      modelSearch: "",
      status: 0,
      statusList: [
        { id: -1, value: "All" },
        { id: 1, value: "Finish" },
        { id: 0, value: "In Process" },
      ],
      reasonDelete: "重复",
    };
  },
  i18n: {
    messages: {
      fr: FR.Component.Order.List,
      en: EN.Component.Order.List,
      zh: ZH.Component.Order.List,
      de: DE.Component.Order.List,
      nl: NL.Component.Order.List,
    },
  },
  mounted: function () {
    // 国际化
    this.initData();
    this.$root.eventHub.$on(Core.Const.DATA.KEY_I18N_UPDATE, () => {
      setTimeout(() => {
        this.initData();
      }, 100);
    });

    // 获取权限
    this.authList = this.$store.state.userAuth;

    this.getOrderList();
  },
  methods: {
    initData() {
      this.headData = [
        "Index",
        this.$t("headData.orderNo"),
        this.$t("headData.customerName"),
        this.$t("headData.model"),
        this.$t("headData.pQ"),
        this.$t("headData.status"),
        this.$t("headData.operation"),
      ];
    },
    handleCurrentChange(val) {
      this.currentPage = val;
      Core.Data.set(Core.Const.DATA.KEY_COMPONENT_ORDER_LIST_PAGE, this.currentPage);
      this.getOrderList();
    },

    addProductionOrder() {
      this.$router.push({ name: "componentOrderSave" });
    },

    getOrderList() {
      if (this.loading) {
        return;
      }
      this.loading = true;
      this.sourceId = this.sourceId.trim();
      Core.Data.set(Core.Const.DATA.KEY_COMPONENT_ORDER_LIST_CONDITION, this.sourceId);
      Core.Api.Order.getComponentProductionOrderList(
        this.sourceId,
        this.currentPage,
        this.customerName.trim(),
        this.modelSearch.trim(),
        this.status
      )
        .then((res) => {
          this.loading = false;
          this.tableData = res.order_list;
          this.total = res.count;
        })
        .catch((err) => {
          console.log(err);
          this.loading = false;
        });
    },

    log() {
      console.log(this.status);
      this.getOrderList();
    },

    showDeleteDialog(item) {
      this.selectItem = item;
      this.dialogDeleteVisible = true;
    },

    deleteProductionOrder() {
      Core.Api.Order.deleteProductionOrder(this.selectItem.id)
        .then((res) => {
          this.$message({
            message: "Delete successfully",
            type: "success",
          });
          this.dialogDeleteVisible = false;
          let info = {
            sn: this.selectItem.source_id,
            object_id: 0,
            data: this.selectItem.sn + "-" + this.selectItem.customer_id,
            type: 0,
            remark: this.reasonDelete.trim(),
          };
          Core.Api.request({
            url: "/report/save",
            data: info,
            headers: {
              "content-type": "application/json,chart=utf-8",
            },
            method: "POST",
          })
            .then((res) => {
              console.log(res);
            })
            .catch((err) => {
              console.log(err);
            });
          this.getOrderList();
        })
        .catch((err) => {
          this.dialogDeleteVisible = false;
          console.log(err);
        });
    },

    goProductionOrderDetail(orderId) {
      this.$router.push({ name: "componentOrderDetail", query: { orderId: orderId } });
    },

    goToComponentList(orderNo) {
      this.$router.push({
        name: "componentComponentList",
        query: { orderNo: orderNo, from: "order" },
      });
    },
  },
};
</script>

<style lang="scss" rel="stylesheet/scss">
.order-list {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  .table-wrap {
    flex: 1;
  }
  .header {
    height: auto;
    .el-form-item {
      margin-bottom: 0;
    }
  }
  /*.loading {*/
  /*width: 100%;*/
  /*display: flex;*/
  /*align-items: center;*/
  /*justify-content: center;*/
  /*}*/
  .table-wrap {
    .long-td {
      max-width: 270px;
      text-overflow: ellipsis;
      overflow: hidden;
      text-align: left;
    }
  }
}
</style>



// WEBPACK FOOTER //
// list.vue?04b97ed0