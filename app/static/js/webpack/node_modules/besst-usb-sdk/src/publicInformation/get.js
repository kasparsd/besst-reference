/**
 * Public information get
 * @module publicInformation/get
 */

const client = require('../usbClient/client');
const common = require('../usbClient/common');
const q = require('q');

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.pulse = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '30', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.sensorSignal = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '31', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.controllerInformation = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '32', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.controllerInformation_1 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '32', '01');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.controllerInformation_2 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '32', '02');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.controllerInformation_3 = (source, target) => {
    // return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '32', '03');
    const deferred = q.defer();
    //Timeout requests after 1 seconds
    let timer = setTimeout(() => {
        deferred.reject('Timeout');
    }, 10000);

    client.events.on('data', (res) => {
        if (res.code === '32' && res.subCode == '03') {
            clearTimeout(timer);
            deferred.resolve(res);
        }
    });
    return deferred.promise;
};

module.exports.controllerInformation_3203 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '32', '03').then(res=>{
        try {
            let data = res.data;
            const speedLimit = parseInt(data.substring(0, 4), 16) * 0.01;
            const wheelDiameter =
            parseInt(data.substring(6, 8) + data.substring(4, 5), 16) +
            parseInt(data.substring(5, 6), 16) * 0.1;
            const circumference = parseInt(data.substring(8, 12),16)

            res.parsedInfo = {
                speedLimit: speedLimit,
                wheelDiameter: wheelDiameter,
                circumference: circumference,
            };

        } catch (error) {
            console.error(error);
        }
        return res;
    })
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.controllerInformation_4 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '32', '04');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.controllerInformation_5 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '32', '05');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.batteryInformation = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '34', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.batteryInformation_1 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '34', '01');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.batteryInformation_2 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '34', '02');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.besst = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '35', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.transmissionInformation = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '36', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.transmissionInformation_1 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '36', '01');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.transmissionInformation_2 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '36', '02');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.transmissionInformation_3 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '36', '03');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI 
 * @returns {Promise}
 */
module.exports.eletronicLockInformation = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '37', '00');
};


//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/publicInformation/get.js
// module id = 1238
// module chunks = 76