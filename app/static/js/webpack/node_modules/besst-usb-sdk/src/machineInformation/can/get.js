/**
 * Machine information CAN get
 * @module machineInformation/can/get
 */

const client = require('../../usbClient/client');
const common = require('../../usbClient/common');
const q = require('q');

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.hardwareVersionNumber = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.softwareVersionNumber = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '01');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.modelNumber = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '02');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.serialNumber = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '03');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.customerNumber = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '04');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.manufacturer = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '05');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.params = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '06');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.errorCode = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '07');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.commonGet = (source, target, index, indexSec) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, index, indexSec);
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.bootLoad = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '08');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_1 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '11');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_2 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '12');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_3 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '13');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_4 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '14');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_5 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '15');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_6 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '16');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_7 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '17');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.conParams_8 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', '18');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.sensorCalibration = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '61', '00');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.controllerFeatures = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '62', '15');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.dataOfHmi = () => {
    const deferred = q.defer();
    //Timeout requests after 1 seconds
    let timer = setTimeout(() => {
        deferred.reject('Timeout');
    }, 10000);

    client.events.on('data', (res) => {
        if (res.code === '63' && res.subCode == '00') {
            clearTimeout(timer);
            deferred.resolve(res);
        }
    });
    return deferred.promise;
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.dataOfHmi_1 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '63', '01');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.dataOfHmi_2 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '63', '02');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.dataOfHmi_3 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '63', '03');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.dataOfHmi_4 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '63', '04');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.designInformation = () => {
    const deferred = q.defer();
    //Timeout requests after 1 seconds
    let timer = setTimeout(() => {
        deferred.reject('Timeout');
    }, common.timeout);

    client.events.on('data', (res) => {
        if (res.code === '64') {
            clearTimeout(timer);
            deferred.resolve(res);
        }
    });
    return deferred.promise;
};

/**
 * @function 获取设计信息,解析返回值
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.designInformation_v2 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '00').then(res=>{
        try {
            // D0串数、D1并数、D2D3设计容量
            let data = res.data;
            const a = parseInt(data.substring(0, 2), 16);
            const b = parseInt(data.substring(2, 4), 16);
            const c = parseInt(data.substring(4, 8), 16);

            res.parsedInfo = {
                values:[a,b,c]
            };

        } catch (error) {
            console.error(error);
        }
        return res;
    })
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.chargingInformation = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '01');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '02');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation_1 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '03');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation_2 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '04');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation_3 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '05');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation_4 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '06');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation_5 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '07');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation_6 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '08');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCellsInformation_7 = (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '09');
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryCharacteristics= (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '64', '15');
};

module.exports.batteryErrorCode= (source, target) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, '60', 'E2').then(res=>{
        try {
            let dataPacks = res.dataPacks;
            let h_buf = Buffer.from(dataPacks.shift().data,'hex');
            res.parsedInfo = {
                err_type_count: h_buf.readUInt16BE(),
                err_count: h_buf.readUInt16BE(2),
                err_list: [],
            };
            dataPacks.forEach((it) => {
                let buf = Buffer.from(it.data,'hex');
                res.parsedInfo.err_list.push({
                date: [
                    buf.readUint8() + 2000,
                    "-",
                    buf.readUint8(1),
                    "-",
                    buf.readUint8(2),
                    " ",
                    buf.readUint8(3),
                    ":",
                    buf.readUint8(4),
                    ":",
                    buf.readUint8(5),
                ].join(''),
                err_code: buf.readUint8(6),
                ext: buf.readUint8(7),
                });
            });
        } catch (error) {
            console.error(error);
        }
        return res;
    });
};

/**
 * @function
 * @param {string} source - defaults to BST
 * @param {string} target - defaults to HMI
 * @returns {Promise}
 */
module.exports.batteryInfoGet= (source, target, index, indexSub ) => {
    return client.request_get(common.USB_CMD.USB_CMD_PC_TO_CAN, source, target, common.CAN.READ_CMD, index, indexSub);
};



//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/machineInformation/can/get.js
// module id = 475
// module chunks = 76