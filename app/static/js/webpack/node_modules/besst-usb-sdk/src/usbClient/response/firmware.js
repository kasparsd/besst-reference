/**
 * USB Client Response - Firmware
 * @module response/firmware
 */

const eventsHandler = require('../eventsHandler');
const device = require('../device');
const common = require('../common');
const logger = require('../logger');
const handler = require('./handler');
const requestHandler = require('../request/handler');
const events = eventsHandler.events;
const nestedError  = require('nested-error-stacks');

/**
 * Process a firmware request object
 * @function
 * @param {Object} requestObj - request object
 */
module.exports.update = (requestObj) => {
    let response;
    let buffer = requestObj.buffer;
    let deferred = requestObj.deferred;

    try {
        if (device.isConnected()) {
            if (buffer && buffer.length !== 0) {
                logger.debug('[TX] ' + buffer.toString('hex'));
                device.getDevice().write(common.bufferToArray(buffer));
            } else {
                logger.debug('Firmware update completed');
                /**
                 * Firmware update completed
                 * @event firmware-update-completed-progress
                 */
                events.emit('firmware-update-completed');
            }
            response = {
                requestBuffer: buffer
            };
            //read response

            //clear all event listeners first so that we do not have additional listeners
            events.removeAllListeners('data');

            //Timeout requests after 1 seconds
            let timer = setTimeout(() => {
                requestHandler.removeFirstRequest();
                if (requestHandler.getNextRequest()) {
                    events.emit('requestProcess');
                }
                deferred.reject('Timeout');
            }, common.timeout.FIRMWARE_UPGRADE);

            events.on('data', buffer => {
                if (buffer && typeof buffer.readUIntBE === 'function') {
                    response.buffer = buffer;
                    response.hex = buffer.toString('hex');
                    let headCode = buffer.readUIntBE(0, 1);
                    let len;
                    switch (headCode) {
                        case 0x22:
                            let index = buffer.readUIntBE(1, 2);
                            len = buffer.readUIntBE(3, 1);
                            response.headCode = headCode;
                            response.index = index;
                            response.data = buffer.readUIntBE(4, len);
                            clearTimeout(timer);
                            handler.successResponse_firmwareUpdate(deferred, response);
                            break;
                        case 0x26:
                            response.headCode = headCode;
                            response.crc = buffer.readUIntBE(1, 2);
                            len = buffer.readUIntBE(3, 1);
                            response.data = buffer.readUIntBE(4, len);
                            events.emit('firmware-update-check', {crc: response.crc, d: response.data});
                            clearTimeout(timer);
                            handler.successResponse_firmwareUpdate(deferred, response);
                            break;
                        default:
                            deferred.reject(new nestedError('Unknown response code provided ' + headCode));
                            break;
                    }
                }
            });
        } else {
            throw new nestedError('Unable to find ' + common.deviceName);
        }
    } catch (err) {
        deferred.reject(err);

        requestHandler.removeFirstRequest();
        if (requestHandler.getNextRequest()) {
            events.emit('requestProcess');
        }
    }
}



//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/response/firmware.js
// module id = 1235
// module chunks = 76