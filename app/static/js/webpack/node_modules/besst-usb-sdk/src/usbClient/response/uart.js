/**
 * USB Client Response - UART
 * @module response/uart
 */

const eventsHandler = require('../eventsHandler');
const device = require('../device');
const common = require('../common');
const parsers = require('../parsers');
const logger = require('../logger');
const requestHandler = require('../request/handler');
const handler = require('./handler');
const events = eventsHandler.events;
const nestedError = require('nested-error-stacks');

/**
 * Process a UART request object
 * @function
 * @param {Object} requestObj - promise object
 */
module.exports.get = (requestObj) => {
    let response;
    let usbCommand = requestObj.usbCommand;
    let data = requestObj.payload;
    let deferred = requestObj.deferred;

    try {
        if (device.isConnected()) {
            const requestData = parsers.request(common.HEADER, usbCommand, common.HEADER_INDEX, '', data);
            const req = {
                payload: data
            };

            logger.debug('[REQ] ' + JSON.stringify(req));
            logger.trace('[REQ RAW] ' + Buffer.from(requestData).toString('hex'));

            device.getDevice().write(requestData);
            response = {
                data: '',
                dataPacks: {}
            };
            //read response

            //clear all event listeners first so that we do not have additional listeners
            events.removeAllListeners('data');

            //Timeout requests after 1 seconds
            let timer = setTimeout(() => {
                deferred.reject('Timeout');
                requestHandler.removeFirstRequest();
                if (requestHandler.getNextRequest()) {
                    events.emit('requestProcess');
                }
            }, common.timeout.UART);

            events.on('data', buffer => {
                if (buffer && typeof buffer.readUIntBE === 'function') {
                    response.buffer = buffer;
                    response.hex = buffer.toString('hex');
                    
                    let len = buffer.readUIntBE(3, 1);
                    response.data = buffer.slice(4, len + 4);
                    response.data = response.data.toString('hex');


                    clearTimeout(timer);
                    handler.successResponse_firmwareUpdate(deferred, response);
                }
            });
        } else {
            throw new nestedError('Unable to find ' + common.deviceName);
        }
    } catch (err) {
        deferred.reject(err);

        requestHandler.removeFirstRequest();
        if (requestHandler.getNextRequest()) {
            events.emit('requestProcess');
        }
    }
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/response/uart.js
// module id = 1236
// module chunks = 76