/**
 * USB Client Response - Tool
 * @module response/tool
 */

const eventsHandler = require('../eventsHandler');
const device = require('../device');
const common = require('../common');
const parsers = require('../parsers');
const logger = require('../logger');
const requestHandler = require('../request/handler');
const handler = require('./handler');
const events = eventsHandler.events;
const nestedError = require('nested-error-stacks');

/**
 * Process a Tool request object
 * @function
 * @param {Object} requestObj - promise object
 */
module.exports.cmd = (requestObj) => {
    let response;
    let deferred = requestObj.deferred;

    try {
        if (device.isConnected()) {
            const cmdHexString = requestObj.hex;
            const requestData = parsers.request(common.HEADER, requestObj.usbCommand, common.HEADER_INDEX, cmdHexString, 0x00);
            logger.trace('[TX] ' + JSON.stringify(requestData));
            logger.trace('[TX RAW] ' + Buffer.from(requestData).toString('hex'));

            device.getDevice().write(requestData);
            response = {
                message: requestObj.responseMessage
            };
            //read response

            //clear all event listeners first so that we do not have additional listeners
            events.removeAllListeners('data');


            if (response.message) {
                handler.successResponse_firmwareUpdate(deferred, response);
            } else {
                let timer = setTimeout(() => {
                    requestHandler.removeFirstRequest();
                    if (requestHandler.getNextRequest()) {
                        events.emit('requestProcess');
                    }
                    deferred.reject('Timeout');
                }, common.timeout.TOOL);

                events.on('data', packet => {
                    if (packet && packet.toString().startsWith('3')) {
                        clearTimeout(timer);
                        response.message = packet;
                        handler.successResponse_firmwareUpdate(deferred, response);
                    }
                });
            }
        } else {
            throw new nestedError('Unable to find ' + common.deviceName);
        }
    } catch (err) {
        deferred.reject(err);

        requestHandler.removeFirstRequest();
        if (requestHandler.getNextRequest()) {
            events.emit('requestProcess');
        }
    }
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/response/tool.js
// module id = 1234
// module chunks = 76