/**
 * USB Client Request - Tool
 * @module request/tool
 */

const common = require('../common');
const handler = require('./handler');
const eventsHandler = require('../eventsHandler');
const events = eventsHandler.events;

/**
 * @function
 * @returns {Promise}
 */
module.exports.reset = () => {
    events.removeAllListeners('data');
    handler.clearAllRequests();

    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_BESST_REST,
        responseMessage: 'USB controller reset sucessful',
        type: 'DEVICE',
        hex: '00000000'
    });
}

/**
 * @function
 * @param {string} hex - 01010000
 * @returns {Promise}
 */
module.exports.wakeUp = (hex) => {
    events.removeAllListeners('data');
    handler.clearAllRequests();

    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_BESST_KEY,
        responseMessage: 'USB controller woken up',
        type: 'DEVICE',
        hex: hex || '01010000'
    })
}

/**
 * @function
 * @returns {Promise}
 */
module.exports.hardwareVersion = () => {
    events.removeAllListeners('data');
    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_BESST_HW,
        type: 'DEVICE',
        hex: '00000000'
    })
}

/**
 * @function
 * @param {string} payload - 00000000
 * @returns {Promise}
 */
module.exports.serialNumber = (payload) => {
    events.removeAllListeners('data');
    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_BESST_SN,
        type: 'DEVICE',
        hex: payload ? payload : '00000000'
    })
}

/**
 * @function
 * @returns {Promise}
 */
module.exports.softwareVersion = () => {
    events.removeAllListeners('data');
    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_BESST_SW,
        type: 'DEVICE',
        hex: '00000000'
    })
}

/**
 * @function
 * @returns {Promise}
 */
module.exports.checkComponents = () => {
    events.removeAllListeners('data');
    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_BESST_CHECK,
        type: 'DEVICE',
        hex: '00000101'
    })
}

/**
 * @function
 * @param {string} mode - 01
 * @returns {Promise}
 */
module.exports.switchModel = (mode = '01') => {
    events.removeAllListeners('data');
    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_PC_MODEL,
        responseMessage: 'Switch completed',
        type: 'DEVICE',
        hex: mode + '000000'
    })
}

/**
 * @function
 * @param {string} payload
 * @returns {Promise}
 */
module.exports.config = (payload) => {
    events.removeAllListeners('data');
    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_BESST_CONFIG,
        responseMessage: 'Set config',
        type: 'DEVICE',
        hex: payload
    })
}

/**
 * @function
 * @returns {Promise}
 */
module.exports.battery = {
    setModeIn: () => {
        events.removeAllListeners('data');
        return handler.request({
            usbCommand: common.USB_CMD.USB_CMD_PC_TO_CTL,
            responseMessage: 'Set mode in',
            type: 'DEVICE',
            hex: '03170926'
        })
    },
    setModeOut: () => {
        events.removeAllListeners('data');
        return handler.request({
            usbCommand: common.USB_CMD.USB_CMD_PC_TO_CTL,
            responseMessage: 'Set mode out',
            type: 'DEVICE',
            hex: '03171027'
        })
    }
}

/**
 * @function
 * @returns {Promise}
 */
module.exports.updateStart = () => {
    events.removeAllListeners('data');
    return handler.request({
        usbCommand: common.USB_CMD.USB_CMD_PC_BIN_CLEAN,
        responseMessage: 'update start',
        type: 'DEVICE',
        hex: '00000000'
    })
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/request/tool.js
// module id = 1232
// module chunks = 76