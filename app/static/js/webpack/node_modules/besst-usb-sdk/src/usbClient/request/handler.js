/**
 * USB Client Request - Handler
 * @module request/handler
 */

const q = require('q');
const eventsHandler = require('../eventsHandler');
const device = require('../device');
const events = eventsHandler.events;

/**
 * Stores a request queue using FIFO (First In First Out) requests to be processed
 * Allows the skipping of the queue by injecting requests to the front of the queue
 * @function
 */
var requestQueue = [];

/**
 * Add request to queue
 * @function
 * @param {Object} requestObj - request object
 * @param {boolean} piroitise - add request to the front of the queue
 * @return {string} promise
 */
module.exports.request = (requestObj, piroitise) => {
    requestObj = requestObj || {};
    requestObj.type = requestObj.type || 'CAN';
    requestObj.deferred = requestObj.deferred || q.defer();

    if (device.isConnected()) {
        if (piroitise) {
            requestQueue.splice(1, null, requestObj); //Dont use position 0 as that item will be removed shortly
        } else {
            requestQueue.push(requestObj);
        }

        if (requestQueue.length == 1) {
            events.emit('requestProcess');
        }
    } else {
        requestObj.deferred.reject('Connection not yet established');
    }
    return requestObj.deferred.promise;
}

/**
 * Get the next request object to process
 * @function
 * @return {Object} promise
 */
module.exports.getNextRequest = () => {
    return requestQueue.length > 0 ? requestQueue[0] : null;
};

/**
 * Removes the first request at position 0 in the queue
 * @function
 */
module.exports.removeFirstRequest = () => {
    requestQueue.shift();
};

/**
 * Removes all requests from the request queue
 * @function
 */
module.exports.clearAllRequests = () => {
    requestQueue = [];
};



//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/request/handler.js
// module id = 66
// module chunks = 76