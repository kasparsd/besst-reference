/**
 * Besst SDK client
 * @module client
 */

const q = require('q');
const eventsHandler = require('./eventsHandler');
const requestCan = require('./request/can');
const requestFirmware = require('./request/firmware');
const requestUart = require('./request/uart');
const requestHandler = require('./request/handler');
const requestTool = require('./request/tool');
const responseCan = require('./response/can');
const responseDevice = require('./response/tool');
const responseFirmware = require('./response/firmware');
const responseUart = require('./response/uart');
const device = require('./device');
const events = eventsHandler.events;

/**
 * Process request event raised, forces all requests into a FIFO (First in first out) queue
 * @event requestProcess
 * @returns {object} Next request object to process within the queue
 */
events.on('requestProcess', () => {
    let nextRequest = requestHandler.getNextRequest();
    if (nextRequest != null) {
        switch (nextRequest.type) {
            case 'UART':
                responseUart.get(nextRequest);
                break;
            case 'CAN':
                if (device.dfuEnabled() === false) {
                    if (nextRequest.usbCommand) {
                        responseCan.get(nextRequest);
                    } else {
                        responseFirmware.update(nextRequest);
                    }
                } else if(nextRequest.hasOwnProperty("buffer")){
                    // rejectRequest(nextRequest, 'Device is in DFU mode');
                    responseFirmware.update(nextRequest);
                }
                break;
            case 'DEVICE':
                responseDevice.cmd(nextRequest);
                break;
            default:
                rejectRequest(nextRequest, 'Invalid request ' + nextRequest.type + ' against ' + device.type + ' device');
                break;
        }
    }
});

/**
 * Create a dot.
 * @function
 * @private
 * @param {string} nextRequest - Next request to be processed.
 * @param {object} err - Error object.
 */
function rejectRequest(nextRequest, err) {
    requestHandler.removeFirstRequest();
    nextRequest.deferred.reject(err);
}

/**
 * Log debug entry
 * @function
 * @private
 * @param {string} msg - the input raw command
 * @param {string} err - the input raw command
 * @returns {bool} true if reset was sucessful
 */
function reset() {
    return requestTool.reset()
        .then(() => {
            const deferred = q.defer();
            setTimeout(() => {
                this.connect();
                deferred.resolve();
            }, 5000);
            return deferred.promise;
        });
}

// /**
//  * {@link besst-usb-sdk.module_device.html#~connect device.connect}
//  */
module.exports.connect = device.connect;
module.exports.disconnect = device.disconnect;
module.exports.isConnected = device.isConnected;
module.exports.getDeviceType = device.getDeviceType;
module.exports.dfuEnabled = device.dfuEnabled;
module.exports.events = events;
module.exports.request_get = requestCan.get;
module.exports.request_update = requestCan.update;
module.exports.request_updateSimple = requestCan.updateSimple;
module.exports.request_firmwareUpdate = requestFirmware.update;
module.exports.request_getUart = requestUart.get;
module.exports.reset = reset;
module.exports.wakeUp = requestTool.wakeUp;
module.exports.hardwareVersion = requestTool.hardwareVersion;
module.exports.serialNumber = requestTool.serialNumber;
module.exports.softwareVersion = requestTool.softwareVersion;
module.exports.checkComponents = requestTool.checkComponents;
module.exports.switchModel = requestTool.switchModel;
module.exports.updateStart = requestTool.updateStart;
module.exports.config = requestTool.config;
module.exports.batterySetModeIn = requestTool.battery.setModeIn;
module.exports.batterySetModeOut = requestTool.battery.setModeOut;



//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/client.js
// module id = 83
// module chunks = 76