/**
 * USB Client Response - Handler
 * @module response/handler
 */

const eventsHandler = require('../eventsHandler');
const common = require('../common');
const requestHandler = require('../request/handler');
const logger = require('../logger');
const events = eventsHandler.events;

/**
 * Parse sucessful response
 * @function
 * @param {Object} deferred - promise object
 * @param {Object} response - response object
 */
module.exports.successResponse = (deferred, response) => {

    if (deferred) {
        // merge the packs
        if (response.dataPacks.length > 0) {
            let dataLen = response.dataLen;
            let data = response.dataPacks.map(pack => {
                if (pack === undefined) {
                    return '';
                }
                return pack.data.substring(0, pack.dataLen * 2);
            }).join('');
            if (data.length != dataLen * 2) {
                deferred.reject("INVALID_LENGTH");
            }

            response.data = data;
        }
        response.dataParsed = common.hex2a(response.data).toString();

        deferred.resolve(response);
    }
    requestHandler.removeFirstRequest();
    logger.debug('[RX] ' + JSON.stringify(response));

    if (requestHandler.getNextRequest()) {
        events.emit('requestProcess');
    }
}

/**
 * Parse sucessful response for firmware update
 * @function get
 * @param {Object} deferred - promise object
 * @param {Object} response - response object
 */
module.exports.successResponse_firmwareUpdate = (deferred, response) => {
    deferred.resolve(response);
    requestHandler.removeFirstRequest();
    logger.debug('[RX] ' + JSON.stringify(response));

    if (requestHandler.getNextRequest()) {
        events.emit('requestProcess');
    }
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/response/handler.js
// module id = 216
// module chunks = 76