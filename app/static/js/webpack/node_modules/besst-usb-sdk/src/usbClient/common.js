/**
 * Besst SDK common properties
 * @module common
 */


module.exports.deviceName = 'BaFang Besst';
module.exports.HEADER = 0x00;
module.exports.HEADER_INDEX = 0x0000;

/**
 * Timeout for each USB request in milliseconds
 * @enum {number}
 */
module.exports.timeout = {
    /**3000 */
    CAN: 3000,
    /**5000 */
    UART: 5000,
    /**10000 */
    FIRMWARE_UPGRADE: 10000,
    /**100 */
    TOOL: 100
}

/**
 * Enable logger capabilities
 * @enum {boolean}
 */
module.exports.logger = {
    /**All HEX packages, default = false */
    trace: false,
    /**Formatted request and response packages, default = false */
    debug: false,
    /**Generic logging, default = false */
    info: false
}

module.exports.setExternalLogger = require('./logger').setExternalLogger;

/**
 * @enum {hex}
 * @readonly
 */
module.exports.DEVICE = {
    SEN: 0x01,
    CTL: 0x02,
    HMI: 0x03,
    BAT: 0x04,
    BST: 0x05,
    ADV: 0x1f,
    CTL2: 0x0A,
}

/**
 * @enum {hex}
 * @readonly
 */
module.exports.CAN = {
    WRITE_CMD: 0x00,
    READ_CMD: 0x01,
    NORMAL_ACK: 0x02,
    ERROR_ACK: 0x03,
    LONG_START_CMD: 0x04,
    LONG_TRANG_CMD: 0x05,
    LONG_END_CMD: 0x06,
    LONG_WARNING_CMD: 0x07,
}

/**
 * @enum {hex}
 * @readonly
 */
module.exports.OPT = {
    OPT_HARDWARE_VERSION: 0x00,
    OPT_SOFTWARE_VERSION: 0x01,
    OPT_MODEL_VERSION: 0x02,
    OPT_SN: 0x03,
    OPT_CLIENT_NO: 0x04
}

/**
 * @enum {hex}
 * @readonly
 */
module.exports.USB_CMD = {
    USB_CMD_HMI_TO_PC: 0x10, // Uart 协议 的 Hmi
    USB_CMD_CTL_TO_PC: 0x11, // Uart 协议 的 Ctrl
    USB_CMD_CAN_TO_PC: 0x12, // Can 协议 
    USB_CMD_PC_TO_HMI: 0x13, // Uart
    USB_CMD_PC_TO_CTL: 0x14, // Uart
    USB_CMD_PC_TO_CAN: 0x15, // Can 协议 
    USB_CMD_BESST_TO_PC: 0x20,
    USB_CMD_BESST_CONFIG: 0x21,
    USB_CMD_BESST_ACK: 0x22,
    USB_CMD_PC_BIN_SEND: 0x23,
    USB_CMD_PC_BIN_INF: 0x24,
    USB_CMD_PC_BIN_CLEAN: 0x25,
    USB_CMD_PC_BIN_ABORT: 0x26, //26 crcH, crcL len result  01 success/ 00 fail

    USB_CMD_PC_MODEL: 0X27, //  270000+ 01（诊断）/00 （读写参数，控制器，仪表，传感器，电池等等）（可以发很多次，不关 Uart和 Can
    USB_CMD_PC_BIN_INF_3: 0X29, //  

    USB_CMD_BESST_HW: 0x30, //返回给PC   硬件版本号
    USB_CMD_BESST_SN: 0x31, //返回给PC   SN
    USB_CMD_BESST_SW: 0x32, //返回给PC   软件版本号
    USB_CMD_BESST_CHECK: 0x33, //返回给PC    电流   电压
    USB_CMD_BESST_KEY: 0x34, // 340000 + 01(PC 打开仪表HMI) （可以发很多次）+ 01（ 控制器CTRL）（只能发一次）（可以发很多次，不关Uart和Can）  发00 无效， 控制器发01 ，发第二次就会关 340000101000000

    USB_CMD_BESST_REST: 0x39 //复位 reset besst    39000000000000

}

/**
 * Get an enum key based off a value
 * @function
 * @param {array} enums - Array of enums
 * @param {object} value - Enum value
 * @returns {string} Associated key if avaliable
 * @returns {null} If key is not avaliable null is returned
 */
module.exports.stringOfEnum = function (enums, value) {
    for (var k in enums) {
        if (enums[k] == value) return k;
    }
    return null;
}

/**
 * @function
 * @param {array} enums - Array of enums
 * @param {object} value - Enum value
 * @returns {string} Associated key if avaliable
 * @returns {null} If key is not avaliable null is returned
 */
function hexAllocToStr(hex, len) {
    if (arguments.length !== 2) {
        return '';
    }

    len = len || hex.toString().length;
    let hexStr = parseInt(hex.toString(), 16).toString(16);
    if (hexStr.length % 2 !== 0) {
        hexStr = '0' + hexStr;
    }
    hexStr = new Array(len + 1).join('0') + hexStr;
    return hexStr.substr(hexStr.length - len, len);
}

function hexAllocToBinaryStr(hex, length) {
    if (arguments.length !== 2) {
        return '';
    }

    let str = new Array(length + 1).join('0') + parseInt(hex, 16).toString(2);
    return str.substr(str.length - length, length);
}


function numberToHexStr(int) {
    if (!int) return '';

    let hexString = parseInt(int).toString(16);
    if (hexString.length % 2 !== 0) {
        hexString = '0' + hexString;
    }
    return hexString;
}

function bufferToArray(buf) {
    let arr = [];
    let len = buf.length;
    for (let a = 0; a < len; a++) {
        arr.push(buf[a]);
    }
    return arr;
}

function strToHexCharCode(str) {
    if (!str) return '';

    var hexCharCode = [];
    for (var i = 0; i < str.length; i++) {
        hexCharCode.push((str.charCodeAt(i)).toString(16));
    }
    return hexCharCode.join('');
}

function strToHexString(str) {
    return strToHexCharCode(str);
}

function strToHexLength(str) {
    if(!str) return '';

    var hexCharCode = [];
    for (var i = 0; i < str.length; i++) {
        hexCharCode.push((str.charCodeAt(i)).toString(16));
    }
    return hexCharCode.length < 10 ? ('0' + hexCharCode.length) : hexCharCode.length.toString();
}

function hex2a(hexString) {
    hexString=hexString.replace(/((00)+)$/g,"");
    let str = '';
    if(!hexString) return '';
    for (let i = 0; i < hexString.length; i += 2) {
        let num = parseInt(hexString.substr(i, 2), 16);
        if(num > 31 && num < 123 ){
            str += String.fromCharCode(num );
        }
    }
    return str;
}



function hexReverse(hexString) {
    var array = [];
    if (hexString.length % 2 !== 0) {
        hexString = '0' + hexString;
    }

    for (var i = 0; i < hexString.length; i += 2) {
        array.push(hexString.substr(i, 2));
    }
    return array.reverse().join('');
}
module.exports.buildHexStringCommand = (source, target, opt, anfn, nfn) => {
    const cmdPrefix = hexAllocToBinaryStr(source.toString(16), 5) + hexAllocToBinaryStr(target.toString(16), 5) + hexAllocToBinaryStr(opt.toString(16), 3);
    let cmdPrefixHex = parseInt(cmdPrefix, 2).toString(16);
    if (cmdPrefixHex.length % 2 !== 0) {
        cmdPrefixHex = '0' + cmdPrefixHex;
    }
    let cmdHexString = cmdPrefixHex + anfn + nfn;
    return hexReverse(cmdHexString);
};

module.exports.numberToHexStr = numberToHexStr;
module.exports.hexAllocToStr = hexAllocToStr;
module.exports.hexReverse = hexReverse;
module.exports.hexAllocToBinaryStr = hexAllocToBinaryStr;
module.exports.strToHexCharCode = strToHexCharCode;
module.exports.hex2a = hex2a;
module.exports.strToHexString = strToHexString;
module.exports.strToHexLength = strToHexLength;
module.exports.bufferToArray = bufferToArray;


//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/common.js
// module id = 35
// module chunks = 76