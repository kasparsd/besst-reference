/**
 * A module that says hello!
 * @module parsers
 */
const common = require('./common');

/**
 * Parses a CAN request
 * @function
 * @private
 * @param {string} cmd - the input raw command 
 * @return {number} The x value.
 */
function parseCommand(cmd) {
    let cmdHexString = common.hexReverse(cmd);
    let binStr = common.hexAllocToBinaryStr(cmdHexString.substr(0, 4), 13);
    let matchedSources = parseInt(binStr.substr(0, 5).substr(1), 2).toString(16);
    let matchedTarget = parseInt(binStr.substr(5, 5).substr(1), 2).toString(16);
    let cmd_res = parseInt('0' + binStr.substr(10, 3), 2).toString(16);
    let code = cmdHexString.substr(4, 2);
    let subCode = cmdHexString.substr(6, 2);

    return {
        code: code,
        subCode: subCode,
        source: common.stringOfEnum(common.DEVICE, parseInt(matchedSources, 16)),
        sourceCode: matchedSources,
        target: common.stringOfEnum(common.DEVICE, parseInt(matchedTarget, 16)),
        targetCode: matchedTarget,
        can: common.stringOfEnum(common.CAN, parseInt(cmd_res, 16)),
        canCode: cmd_res
    }
}

/**
 * Parses response from USB device
 * @function
 * @param {string} res - the raw USB command 
 * @return {Array} Array of packets
 */
module.exports.response = (res) => {
    const packArr = [];
    let str = res.substr(6);
    while (true) {
        if (str) {
            let packStr = str.substr(0, 26);
            if(packStr.replace(/0/g,'') ===''){
                str = str.substr(26);
                continue;
            }
            let parsedCmd = parseCommand(packStr.substr(0, 8));
            
            let dataLen = parseInt(packStr.substr(8, 2), 16);
            let data = packStr.substr(10, parseInt(dataLen * 2, 16));

            parsedCmd.canCode = parseInt(parsedCmd.canCode, 16);
            parsedCmd.sourceCode = parseInt(parsedCmd.sourceCode, 16);
            parsedCmd.targetCode = parseInt(parsedCmd.targetCode, 16);
            parsedCmd.dataLen = dataLen;
            parsedCmd.data = data;
            packArr.push(parsedCmd);
            str = str.substr(26);
        } else {
            break;
        }
    }

    return packArr;
};

/**
 * Parses request for USB device
 * @function
 * @param {string} header - defaults to 00
 * @param {string} usbCmd - defaults to 0x15
 * @param {object} requestIndexs - either a string or an array of string 
 * @param {string} cmdString - cmd string
 * @param {string} data - data packet to send
 * @return {Array} Array of request packets
 */
module.exports.request = (header, usbCmd, requestIndexs, cmdString, data) => {
    data = data || '';
    let body = common.numberToHexStr(header || '00') + common.numberToHexStr(usbCmd || 0x15);
    if (!requestIndexs instanceof Array) {
        requestIndexs = [requestIndexs];
    }
    body += common.numberToHexStr(requestIndexs[0] || '00');
    body += common.numberToHexStr(requestIndexs[1] || '00');
    body += cmdString;
    body += common.numberToHexStr(data.length / 2 || '00');
    body += (data || '00');
    if ((body.length / 2) < 65) {
        body += (new Array(65 - body.length / 2 + 1).join('00'));
    }

    const array = new Array();
    for (let i = 0; i < body.length; i += 2) {
        array.push(parseInt(body.substr(i, 2), 16));
    }
    return array;
};

/**
 * Parses request for USB device and send as a buffer
 * @function
 * @param {string} header - defaults to 00
 * @param {string} usbCmd - defaults to 0x15
 * @param {string} requestIndex - requestIndex string
 * @param {string} cmdString - cmd string
 * @param {string} data - data packet to send
 * @return {Buffer} request packet as buffer
 */
module.exports.requestBuffer = (header, usbCmd, requestIndex, cmdString, data) => {
    if (!data) {
        data = Buffer.alloc(0);
    }
    let buffer = Buffer.alloc(65);
    buffer.writeUIntBE(header, 0, 1);
    buffer.writeUIntBE(usbCmd, 1, 1);
    buffer.writeUIntBE(requestIndex, 3, 2);
    Buffer.from(cmdString, 'hex').copy(buffer, 5, 0, 4);
    buffer.writeUIntBE(data.length, 6, 1);
    data.copy(buffer, 7, 0);
    console.log('Request:' + buffer.toString('hex'));
    return buffer;
};

/**
 * Process USB response packs to data
 * @function
 * @param {Array} packs - response data packs
 * @return {string} request packet as buffer
 */
module.exports.processResponsePacks = (packs) => {
    if (!packs) {
        return '';
    }

    let data = '';
    let keys = Object.keys(packs).sort();
    for (let key in keys) {
        data += packs[parseInt(key)];
    }
    return data;
}

module.exports.parseCommand = parseCommand;


//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/parsers.js
// module id = 215
// module chunks = 76