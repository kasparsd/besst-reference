/**
 * Besst USB device
 * @module device
 * @memberof besst-usb-sdk
 */
const hid = require('node-hid');
const nestedError = require('nested-error-stacks');
const common = require('./common');
const parsers = require('./parsers');
const eventsHandler = require('./eventsHandler');
const requestHandler = require('./request/handler');
const events = eventsHandler.events;
const logger = require('./logger');

let device = null;
var type = undefined;
/**
 * Connect to any avaliable for BaFang Besst USB device
 * @function connect
 * @return {boolean} true if connected.
 */
module.exports.connect = () => {
    try {
        let devices = hid.devices();
        let bafangDevices = devices.filter(device => {
            return device.product === 'BaFang Besst' || device.product === 'BaFang Besst DFU';
        });

        if (bafangDevices.length > 0 && device == null) {
            device = new hid.HID(bafangDevices[0].path);
            device.dfuEnabled = bafangDevices[0].product === 'BaFang Besst DFU' ? true : false;
            console.log("connect success");

            events.removeAllListeners('data');
            requestHandler.clearAllRequests();

            device.on('data', (data) => {
                if(!data) return;

                let hexStrResponse = Buffer.from(data).toString('hex');
                const packets = parsers.response(hexStrResponse);
                logger.trace('[RX RAW] ' + hexStrResponse);
                logger.trace('[RX] ' + JSON.stringify(packets));

                if (hexStrResponse.startsWith('11') || hexStrResponse.startsWith('10')) {
                    type = 'UART';
                    device.type = 'UART';
                } else if (hexStrResponse.startsWith('12')) {
                    type = 'CAN';
                    device.type = 'CAN';
                }

                if (hexStrResponse.startsWith('12')) {
                    const packets = parsers.response(hexStrResponse);
                    packets.map(packet => {
                        /**
                         * New data packet from USB
                         * @event data
                         * @returns {object} packet - USB parsed data
                         */
                        if(packet){
                            events.emit('data', packet);
                        }

                        /**
                         * New data packet from USB
                         * @event public-data
                         * @returns {object} packet - USB parsed data
                         */
                        events.emit('public-data', packet);
                    });
                } else if (hexStrResponse.startsWith('3') || hexStrResponse.startsWith('27')) {
                    /**
                     * New data packet from USB
                     * @event data
                     * @returns {object} hexStrResponse - HEX response from USB
                     */
                    events.emit('data', hexStrResponse); //pass event

                    /**
                     * New data packet from USB
                     * @event public-data
                     * @returns {object} hexStrResponse - HEX response from USB
                     */
                    events.emit('public-data', hexStrResponse); //pass event
                } else if (hexStrResponse.startsWith('28')) {
                    let progress = parseInt(hexStrResponse.substr(2, 4), 16) * 8;
                    let progressStatus = hexStrResponse.substr(8, 2);

                    /**
                     * Firmware update completed
                     * @event firmware-update-completed-progress
                     * @returns {object} hexStrResponse - HEX response from USB
                     */
                    events.emit('firmware-update-completed-progress', {
                        progress: progress,
                        status: progressStatus
                    }); //pass event
                } else {
                    /**
                     * New data packet from USB
                     * @event data
                     * @returns {object} data - USB raw data
                     */
                    events.emit('data', data);
                    /**
                     * New data packet from USB
                     * @event public-data
                     * @returns {object} data - USB raw data
                     */
                    events.emit('public-data', data);
                }
            });

            device.on('error', (err) => {
                events.removeAllListeners('data');

                /**
                 * Error from USB device detected
                 * @event usb_error
                 * @returns {object} err - USB error
                 */
                events.emit('usb_error', err);
                requestHandler.clearAllRequests();
                device = null;
                logger.error('[DEVICE] Disconnected ', err);
            });

            return true;
        } else {
            return false
        }
    } catch (err) {
        throw new nestedError('Unhandled exception', err);
    }
}

/**
 * Disconnect from BaFang Besst USB device
 * @function disconnect
 * @return {boolean} true if connected.
 */
module.exports.disconnect = () => {
    try {
        if (device) device.close();
        device = null;
        return true;
    } catch (err) {
        //device already closed
        throw new nestedError('Failed to disconnect "BaFand Besst" USB controller', err);
    }
}

/**
 * Check if deveice is connected
 * @function isConnected
 * @return {boolean} true if connected.
 */
module.exports.isConnected = () => {
    return device != null;
}

/**
 * Get connected device
 * @function getDevice
 * @return {object} connected device.
 */
module.exports.getDevice = () => {
    return device;
}

/**
 * Check if deveice is in DFU mode
 * @function dfuEnabled
 * @return {boolean} true if DFU enabled.
 */
module.exports.dfuEnabled = () => {
    return device && device.dfuEnabled;
}

/**
 * Get device type
 * @function getDeviceType
 * @return {string} CAN or UART, only returns when the device is connected
 */
module.exports.getDeviceType = () => {
    return type;
}



//////////////////
// WEBPACK FOOTER
// ./node_modules/besst-usb-sdk/src/usbClient/device.js
// module id = 115
// module chunks = 76