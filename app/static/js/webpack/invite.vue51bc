<template>
  <div class="oem-invite">
    <div class="header">
      <label class="status-label">{{ $t("codeStatus") }}</label>
      <el-select v-model="selectStatus" slot="append" @change="getInviteList()">
        <el-option
          v-for="item in options"
          :key="item.status"
          :label="item.label"
          :value="item.status"
        >
        </el-option>
      </el-select>
      <!--搜索-->
      <el-input class="search-input" v-model="queryContent">
        <!--<el-button slot="append" icon="search" :click="queryOrgInvite"></el-button>-->
      </el-input>
      <div class="btn-group-inline">
        <div class="icons">
          <div class="icon-item search" @click="getInviteList"></div>
        </div>
      </div>
      <div class="btn-group-top">
        <div class="icons">
          <div
            class="icon-item upload"
            @click="dialogContactsVisible = true"
            :title="$t('uploadContacts')"
          ></div>
          <div
            class="icon-item add"
            @click="dialogCreateVisible = true"
            :title="$t('newCode')"
          ></div>
          <div
            class="icon-item send"
            v-show="selectStatus == 1"
            @click="showBatchDialog"
            :title="$t('batchSend')"
          ></div>
        </div>
      </div>
    </div>
    <div class="table-wrap">
      <div class="table-content-holder">
        <table border="0" cellspacing="0" cellpadding="0" class="table-content">
          <thead>
            <td v-for="item in tableHead">{{ item }}</td>
            <td v-show="selectStatus != 3">{{ $t("operation") }}</td>
          </thead>
          <tbody>
            <tr v-for="item in inviteList">
              <td>{{ item.code }}</td>
              <td>{{ item.target_org_name }}</td>
              <td>{{ item.contact }}</td>
              <td>{{ item.target_org_email }}</td>
              <td>{{ item.create_time | timeFormat("Y-m-d") }}</td>
              <td v-show="selectStatus == 1" class="icon-td">
                <div class="icons">
                  <div
                    class="icon-item send"
                    v-on:click.stop="sendInvitation(item)"
                  ></div>
                </div>
                <div class="icons">
                  <div
                    class="icon-item delete"
                    v-on:click.stop="showDeleteDialog(item)"
                  ></div>
                </div>
                <!-- <a class="btn-underline" v-on:click.stop="sendInvitation(item)">{{ $t('send') }}</a> -->
                <!-- <a class="btn-underline" v-on:click.stop="showDeleteDialog(item)">{{ $t('delete') }}</a> -->
              </td>
              <td v-if="selectStatus == 2">
                <div class="icons">
                  <div
                    class="icon-item send"
                    v-on:click.stop="sendInvitation(item)"
                    :title="$t('op.send')"
                  ></div>
                </div>
                <div class="icons">
                  <div
                    class="icon-item delete"
                    v-on:click.stop="showDeleteDialog(item)"
                    :title="$t('op.delete')"
                  ></div>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
        <div class="no-data-content" v-show="inviteList.length <= 0">
          {{ $t("noResult") }}
        </div>
      </div>
      <div class="table-footer">
        <el-pagination
          @current-change="handleCurrentChange"
          :current-page.sync="currentPage"
          :page-size="10"
          layout="prev, pager, next"
          :total="total"
        >
        </el-pagination>
        <p class="total">{{ $t("total") }}: {{ total }}</p>
      </div>
    </div>

    <!--创建邀请码dialog-->
    <el-dialog
      :title="$t('oemInvitation')"
      :visible.sync="dialogCreateVisible"
      class="dialog"
    >
      <el-form ref="form" :model="form" label-width="120px">
        <el-form-item :label="$t('email')">
          <el-input v-model="form.email" class="input"></el-input>
        </el-form-item>
        <el-form-item :label="$t('companyName')">
          <el-input v-model="form.orgName" class="input"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="preview" @click="createInvite">{{ $t("confirm") }}</el-button>
        <el-button type="primary" @click="dialogCreateVisible = false">{{
          $t("cancel")
        }}</el-button>
      </div>
    </el-dialog>

    <!--批量发送dialog-->
    <el-dialog
      :title="$t('selectAccount')"
      :visible.sync="dialogBatchSendVisible"
      class="batch-send-dialog"
    >
      <div>
        <el-transfer
          class="transfer"
          v-model="targetName"
          filterable
          :titles="['Source', 'Target']"
          :button-texts="['To left', 'To right']"
          :footer-format="{
            noChecked: '${total}',
            hasChecked: '${checked}/${total}',
          }"
          @change="handleChange"
          :data="batchSendData"
        >
          <el-button
            class="transfer-footer"
            slot="right-footer"
            size="small"
            @click="batchSend"
          >
            {{ $t("batchSend") }}
          </el-button>
        </el-transfer>
      </div>
    </el-dialog>

    <!-- 删除弹窗 -->
    <el-dialog :title="$t('deleteCode')" :visible.sync="dialogDeleteVisible" size="tiny">
      <p>{{ $t("deleteTip") }}</p>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="deleteInvitation">{{ $t("yes") }}</el-button>
        <el-button type="primary" @click="dialogDeleteVisible = false">{{
          $t("no")
        }}</el-button>
      </div>
    </el-dialog>

    <!-- 上传失败弹窗 -->
    <el-dialog
      :title="$t('uploadFailList')"
      custom-class="video-dialog"
      :visible.sync="dialogUploadFailVisible"
    >
      <table border="1">
        <tr>
          <td>{{ $t("orgName") }}</td>
          <td>{{ $t("email") }}</td>
          <td>{{ $t("reason") }}</td>
        </tr>
        <tr v-for="item in failList">
          <td>{{ item.org_name }}</td>
          <td>{{ item.org_email }}</td>
          <td>{{ item.reason }}</td>
        </tr>
      </table>
    </el-dialog>

    <!--联系人dialog-->
    <el-dialog
      :title="$t('uploadContacts')"
      :visible.sync="dialogContactsVisible"
      class="dialog"
    >
      <div class="pt-30">
        <label>{{ $t("template") }}</label>
        <a
          class="btn-underline"
          href="/static/Contacts_format_for_BESST.xlsx"
          download="Contacts_format_for_BESST.xlsx"
          >{{ $t("download") }}</a
        >
      </div>

      <el-upload
        class="upload-contact"
        :action="uploadOptions.url"
        :data="uploadOptions"
        :show-file-list="false"
        :on-success="handleUploadContact"
        :on-change="changeLoading"
      >
        <el-button>Upload</el-button>
        <!--<div class="icon-item upload" :title="$t('uploadContacts')"></div>-->
      </el-upload>
      <vue-loading
        class="loading"
        type="spin"
        color="#E26829"
        v-if="loading"
      ></vue-loading>
    </el-dialog>
  </div>
</template>

<script>
import Core from "../../../../core/core";
import ZH from "src/assets/lang/zh";
import EN from "src/assets/lang/en";
import DE from "src/assets/lang/de";
import NL from "src/assets/lang/nl";
import FR from "src/assets/lang/fr";
import vueLoading from "vue-loading-template";

export default {
  name: "brandOrderInvitation",
  components: {
    vueLoading,
  },
  data() {
    return {
      Core: Core,
      tableHead: [
        "Invitation Code",
        "Organization Name",
        "Contacts",
        "Target Email",
        "Create Time",
      ],
      inviteList: [],
      currentPage: 1,
      selectStatus: 1,
      total: 0,

      form: {
        email: "",
        orgName: "",
      },
      queryContent: "",

      // 删除弹框
      dialogDeleteVisible: false,
      // 创建弹框
      dialogCreateVisible: false,
      // 批量发送弹框
      dialogBatchSendVisible: false,
      // 上传失败弹框
      dialogUploadFailVisible: false,
      // 联系人弹框
      dialogContactsVisible: false,

      selectDeleteInvitation: "",

      failList: [],
      notSendList: [],
      batchSendData: [],
      batchSendJson: "",
      targetName: [],

      uploadOptions: {
        url: Core.Const.NET.UPLOAD_CONTACT_URL,
        token: Core.Data.getToken(),
        org_type: 3,
      },

      options: [
        {
          status: 1,
          label: "ready to send",
        },
        {
          status: 2,
          label: "sent, but not used",
        },
        {
          status: 3,
          label: "used",
        },
      ],

      loading: false,
    };
  },
  i18n: {
    messages: {
      fr: FR.Brand.OemInvite,
      en: EN.Brand.OemInvite,
      zh: ZH.Brand.OemInvite,
      de: DE.Brand.OemInvite,
      nl: NL.Brand.OemInvite,
    },
  },
  mounted: function () {
    // 国际化
    this.initData();
    this.$root.eventHub.$on(Core.Const.DATA.KEY_I18N_UPDATE, () => {
      setTimeout(() => {
        this.initData();
      }, 100);
    });
    this.getInviteList();
  },
  methods: {
    initData() {
      this.tableHead = [
        this.$t("tableHead.invitation"),
        this.$t("tableHead.targetName"),
        this.$t("tableHead.contact"),
        this.$t("tableHead.targetEmail"),
        this.$t("tableHead.createTime"),
      ];
      this.options = [
        {
          status: 1,
          label: this.$t("codeStatusOptions.readyToSend"),
        },
        {
          status: 2,
          label: this.$t("codeStatusOptions.sentNotUsed"),
        },
        {
          status: 3,
          label: this.$t("codeStatusOptions.used"),
        },
      ];
    },

    handleCurrentChange(val) {
      this.currentPage = val;
      this.getInviteList();
    },

    // 获取邀请列表
    getInviteList() {
      Core.Api.Brand.getOrgInvitationList(
        Core.Const.ORG_TYPE.OEM,
        this.selectStatus,
        this.queryContent,
        this.currentPage
      ).then((res) => {
        this.inviteList = res.invite_list;
        this.total = res.count;
      });
    },

    // 创建弹框上点击confirm按钮
    createInvite() {
      let vm = this;

      if (!vm.form.email) {
        vm.$message({
          message: this.$t("emptyTip.email"),
          type: "warning",
        });
        return;
      }

      if (!vm.form.orgName) {
        vm.$message({
          message: this.$t("emptyTip.name"),
          type: "warning",
        });
        return;
      }

      Core.Api.Brand.invitationEmailSend(
        vm.form.orgName,
        Core.Const.ORG_TYPE.OEM,
        vm.form.email.replace(/\s+/g, "")
      ).then((res) => {
        vm.$message({
          message: this.$t("sendSuccess"),
          type: "success",
        });
        vm.form = {
          email: "",
          orgName: "",
        };
        vm.dialogCreateVisible = false;
        vm.getInviteList();
      });
    },

    changeLoading() {
      this.loading = !this.loading;
    },
    // 上传联系人成功回调
    handleUploadContact(file) {
      console.log(file);
      if (file.code !== 0) {
        this.$message({
          message: this.$t("uploadFailTip"),
          type: "warning",
        });
        return;
      }
      this.failList = file.data.fail_list;
      if (this.failList.length <= 0) {
        this.$message({
          message: this.$t("uploadSuccess"),
          type: "success",
        });
      } else {
        this.dialogUploadFailVisible = true;
      }
      this.getInviteList();
    },

    handleChange(value, direction, movedKeys) {
      this.batchSendJson = value.join();
    },

    getAllList() {
      Core.Api.Brand.getOrgInvitationAllList(Core.Const.ORG_TYPE.OEM, 1).then((res) => {
        this.notSendList = res.invite_list;
        this.generateData();
      });
    },

    // 批量发送
    batchSend() {
      let vm = this;
      if (!vm.batchSendJson) {
        vm.$message({
          message: this.$t("selectTip"),
          type: "error",
        });
        return;
      }
      Core.Api.Brand.invitationEmailBatchSend(vm.batchSendJson).then((res) => {
        vm.$message({
          message: this.$t("sendSuccess"),
          type: "success",
        });
        vm.getInviteList();
        vm.dialogBatchSendVisible = false;
      });
    },

    showBatchDialog() {
      this.getAllList();
      this.batchSendData = [];
      this.dialogBatchSendVisible = true;
    },

    generateData() {
      this.batchSendData = [];
      this.notSendList.forEach((item, index) => {
        this.batchSendData.push({
          key: item.id,
          label: item.target_org_name || item.target_org_email || item.code,
        });
      });
    },

    // 点击发送按钮
    sendInvitation(invite) {
      Core.Api.Brand.sendInvitation(invite.id).then((res) => {
        this.$message({
          message: this.$t("sendSuccess"),
          type: "success",
        });
        this.getInviteList();
      });
    },

    showDeleteDialog(item) {
      this.dialogDeleteVisible = true;
      this.selectDeleteInvitation = item;
    },

    // 点击删除按钮
    deleteInvitation() {
      Core.Api.Brand.deleteInvitation(this.selectDeleteInvitation.id).then((res) => {
        this.$message({
          message: this.$t("deleteSuccess"),
          type: "success",
        });
        this.getInviteList();
        this.dialogDeleteVisible = false;
      });
    },
  },
};
</script>

<style lang="scss" rel="stylesheet/scss">
.oem-invite {
  width: 100%;
  height: 100%;
  .upload-contact {
    display: inline-block;
  }
  .status-label {
    color: #a1a5b1;
    /*font-size: 12px;*/
    margin-right: 15px;
  }
  .search-input {
    width: 160px;
    margin-left: 15px;
  }
  .el-transfer-panel__filter .el-input__inner {
    height: 30px;
  }
  .transfer {
    margin: 0 auto;
    width: 600px;
  }
  .transfer-footer {
    margin-left: 20px;
  }
  .icon-td {
    display: flex;
    align-items: center;
    flex-direction: row;
    height: 80px;
    width: 105px;
    .icons {
      align-self: center;
      width: 35px;
      height: 35px;
      padding-bottom: 36px;
    }
    .send {
      background: url("../../../assets/images/icon/icon-send.png") no-repeat center center /
        22px;
      &:hover {
        background: url("../../../assets/images/icon/icon-send-active.png") no-repeat
          center center / 22px;
      }
    }
  }
  table {
    border-collapse: collapse;
    border-color: rgba(255, 255, 255, 0.3);
    width: 100%;
    tr {
      td {
        width: 25%;
        text-align: center;
        height: 36px;
        line-height: 36px;
        overflow: hidden;
        text-overflow: ellipsis;
        word-break: break-all;
        input {
          height: 34px;
          background: #2b2f3b;
          width: 100%;
          padding: 0 10px;
          color: #ffffff;
        }
      }
    }
  }
  .loading {
    display: inline-block;
    vertical-align: text-bottom;
    position: relative;
    top: -17px;
    margin-right: 17px;
  }
  .pt-30 {
    padding-bottom: 30px;
    label {
      display: inline-block;
      width: 150px;
      color: #fff;
    }
  }
}
</style>



// WEBPACK FOOTER //
// invite.vue?30b91bba