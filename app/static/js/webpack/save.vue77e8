<template>
  <div class="component-order-save">
    <div class="header">
      <div class="btn-group-inline">
        <div class="icons">
          <div class="icon-item back" @click="$router.back()" :title="$t('back')"></div>
        </div>
      </div>
      <label class="title">{{ orderId ? $t("saveOrder") : $t("createOrder") }}</label>
    </div>
    <div class="content-wrap">
      <div class="content">
        <div class="order-info">
          <label class="title">{{ $t("orderInfo.title") }}</label>
          <div class="left">
            <div class="item">
              <label class="label"
                >{{ $t("orderInfo.poNo") }} <span class="required">*</span></label
              >
              <el-input class="input" v-model="poNo"></el-input>
            </div>
            <div class="item">
              <label class="label"
                >{{ $t("orderInfo.customerInfo") }} <span class="required">*</span></label
              >
              <el-input
                class="input-left"
                v-model="customerName"
                :placeholder="$t('orderInfo.customerName')"
              ></el-input>
              <el-input
                class="input-right"
                v-model="customerPo"
                :placeholder="$t('orderInfo.customerPo')"
              ></el-input>
            </div>
            <div class="item">
              <label class="label">{{ $t("orderInfo.note") }}</label>
              <el-input class="input-note" v-model="note"></el-input>
            </div>
            <div class="item">
              <label class="label">System:</label>
              <el-select v-model="systemName" placeholder="请选择">
                <el-option
                  v-for="(item, index) in systemNameList"
                  :key="index"
                  :label="item.name"
                  :value="item.value"
                >
                </el-option>
              </el-select>
              <el-button type="primary" class="att-btn" @click="getSystemData"
                >获取数据</el-button
              >
            </div>
            <div class="item">
              <label class="label">Test Plan:</label>
              <el-select v-model="testPlan" placeholder="请选择">
                <el-option
                  v-for="(item, index) in testPlanList"
                  :key="index"
                  :label="item.name"
                  :value="item.value"
                >
                </el-option>
              </el-select>
              <el-button type="primary" class="att-btn" @click="getTestPlanData"
                >获取数据</el-button
              >
            </div>
          </div>
          <div class="parts-list">
            <label class="labelList">{{ $t("itemList") }}</label>
            <el-button type="primary" class="att-btn" @click="dialogCreateVisible = true"
              >+</el-button
            >
            <label class="labelAdd">{{ $t("addItem") }}</label>
          </div>
        </div>
        <div class="table-wrap">
          <table class="table-content" border="0" cellspacing="0" cellpadding="0">
            <thead>
              <td>
                <el-checkbox v-model="allSelectedForDelete"></el-checkbox>
              </td>
              <td v-for="item in tableHead">{{ item }}</td>
            </thead>
            <tbody>
              <tr v-for="(item, index) in orderItems">
                <td>
                  <el-checkbox
                    class="table-checkbox"
                    v-model="item.selected"
                  ></el-checkbox>
                </td>
                <td>{{ item.name || item.item_name }}</td>
                <td>{{ item.item_part_no }}</td>
                <td>
                  <el-input v-model="item.part_no"></el-input>
                </td>
                <td>
                  <el-input-number
                    class="input-number"
                    v-model="item.amount"
                    :min="1"
                  ></el-input-number>
                </td>
                <td>
                  <a class="btn-underline" v-on:click="deleteItem(index)">{{
                    $t("delete")
                  }}</a>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="footer">
          <el-button type="delete" @click="deleteOrderItem">{{ $t("delete") }}</el-button>
        </div>

        <el-dialog
          class="dialog"
          :title="$t('addItem')"
          :visible.sync="dialogCreateVisible"
          size="large"
          top="10%"
        >
          <div class="content">
            <div class="header">
              <el-input
                :placeholder="$t('category')"
                class="search-content"
                :disabled="true"
                v-model="selectCategoryItem.name"
                @click.native="selectCategory"
              >
              </el-input>
              <el-input
                :placeholder="$t('modelNamePN')"
                class="search-content"
                v-model="queryItemCondition"
              >
              </el-input>
              <div class="btn-group-inline">
                <div class="icons">
                  <div
                    class="icon-item search"
                    @click="queryOrderItem"
                    :title="$t('search')"
                  ></div>
                  <div
                    class="icon-item clear"
                    @click="clearCondition"
                    :title="$t('clear')"
                  ></div>
                </div>
              </div>
            </div>
            <div class="table-wrap">
              <table class="table-content" border="0" cellspacing="0" cellpadding="0">
                <thead>
                  <td>
                    <el-checkbox v-model="allSelectedForAdd"></el-checkbox>
                  </td>
                  <td v-for="item in itemHeadData">{{ item }}</td>
                </thead>

                <tbody>
                  <tr v-for="(item, index) in selectItems">
                    <td>
                      <el-checkbox
                        class="table-checkbox"
                        v-model="item.selected"
                      ></el-checkbox>
                    </td>
                    <td><img :src="item.img | getImgUrl" /></td>
                    <td>{{ item.name }}</td>
                    <td>{{ item.ext_part_no }}</td>
                  </tr>
                </tbody>
              </table>

              <el-pagination
                class="pagination"
                @current-change="handleCurrentPageChange"
                :current-page.sync="currentPage"
                :page-size="10"
                layout="prev, pager, next"
                :total="total"
              >
              </el-pagination>
            </div>
            <div class="footer">
              <el-button type="primary" @click="addItems">{{ $t("addItems") }}</el-button>
            </div>
          </div>
        </el-dialog>
        <div class="footer">
          <el-button type="primary" @click="createOrder">{{ $t("saveOrder") }}</el-button>
        </div>
      </div>
    </div>

    <el-dialog
      class="dialog"
      :title="$t('selectCategory')"
      :visible.sync="dialogSelectCategoryVisible"
      size="large"
    >
      <div class="content" style="max-height: 500px; overflow: auto">
        <div class="category-tree">
          <el-tree
            :data="categoryList"
            :props="defaultProps"
            @node-click="handleNodeClick"
          ></el-tree>
        </div>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import Core from "core/core";
import ZH from "src/assets/lang/zh";
import EN from "src/assets/lang/en";
import DE from "src/assets/lang/de";
import NL from "src/assets/lang/nl";
import FR from "src/assets/lang/fr";

export default {
  data() {
    return {
      org: Core.Data.getOrg(),
      user: Core.Data.getUser(),
      tableHead: ["Name", "Article No.", "Customer Article No.", "Quantity", "Operation"],
      itemHeadData: ["Image", "Name", "Part No."],
      queryItemList: [],
      orderItems: [],
      selectItems: [],

      orderId: 0,
      orderData: {},
      queryItemCondition: "",
      poNo: "",
      customerName: "",
      customerPo: "",
      note: "",

      allChecked: false,
      currentPage: 1,
      total: 0,
      dialogCreateVisible: false,
      dialogSelectCategoryVisible: false,
      categoryList: [],
      defaultProps: {
        id: "id",
        children: "child",
        label: "name",
      },
      selectCategoryItem: {
        id: "",
        name: "",
      },
      systemName: "",
      systemNameList: [],
      systemId: "",
      testPlan: "",
      testPlanList: [],
    };
  },
  i18n: {
    messages: {
      fr: FR.Component.Order.Save,
      en: EN.Component.Order.Save,
      zh: ZH.Component.Order.Save,
      de: DE.Component.Order.Save,
      nl: NL.Component.Order.Save,
    },
  },
  computed: {
    allSelectedForAdd: {
      get: function () {
        return this.selectItems.reduce(function (prev, curr) {
          return prev && curr.selected;
        }, true);
      },
      set: function (newValue) {
        this.selectItems.forEach((item) => {
          item.selected = newValue;
        });
      },
    },
    allSelectedForDelete: {
      get: function () {
        return this.orderItems.reduce(function (prev, curr) {
          return prev && curr.selected;
        }, true);
      },
      set: function (newValue) {
        this.orderItems.forEach((item) => {
          item.selected = newValue;
        });
      },
    },
  },
  mounted: function () {
    // 国际化
    this.initData();
    this.$root.eventHub.$on(Core.Const.DATA.KEY_I18N_UPDATE, () => {
      setTimeout(() => {
        this.initData();
      }, 100);
    });

    let data = this.$route.query.orderItem;
    if (data) {
      //                Core.Api.Order.getProductionOrderDetail(this.orderId).then(res => {
      this.orderData = JSON.parse(data);
      let order = this.orderData;
      this.orderId = order.id;
      this.poNo = order.source_id;
      this.customerName = order.customer_id;
      this.customerPo = order.customer_po_no;
      this.systemName = order.customer_part_no;
      this.testPlan = order.test_plan_name;
      this.note = order.remark;
      let orderItems = order.item_list;
      orderItems.forEach((orderItem) => {
        this.orderItems.push({
          item_id: orderItem.item_id,
          item_name: orderItem.item_name,
          part_no: orderItem.part_no,
          amount: orderItem.amount,
          item_part_no: orderItem.item_part_no,
          selected: false,
        });
      });
      //                })
    }

    this.getAllCategory();
  },

  methods: {
    initData() {
      this.tableHead = [
        this.$t("tableHead.name"),
        this.$t("tableHead.articleNo"),
        this.$t("tableHead.customerArticleNo"),
        this.$t("tableHead.quantity"),
        this.$t("tableHead.operation"),
      ];
      this.itemHeadData = [
        this.$t("itemHeadData.image"),
        this.$t("itemHeadData.name"),
        this.$t("itemHeadData.partNo"),
      ];
    },

    getAllCategory() {
      Core.Api.Category.getAllCategoryList(Core.Const.COMPONENT_ROOT_CATEGORY).then(
        (res) => {
          this.categoryList = Core.Util.sortListTree(res.category_list);
        }
      );
    },

    goOrderList() {
      this.$router.push({ path: "list" });
    },

    deleteItem(index) {
      this.orderItems.splice(index, 1);
    },

    getSystemData() {
      this.systemNameList = [];
      Core.Api.request({
        url: "/besst/project/allBesst",
        method: "GET",
      })
        .then((res) => {
          if (res.data && res.data.length > 0) {
            res.data.forEach((item) => {
              let systemItem = {
                name: item.name,
                id: item.id,
                value: item.id,
              };
              this.systemNameList.push(systemItem);
            });
          }
        })
        .catch((err) => {
          console.log(err);
        });
    },
    getTestPlanData() {
      this.testPlanList = [];
      this.$http
        .get(
          "https://www.bafang-electric.com:7777/api/login?username=admin&password=Jimmy007"
        )
        .then((res) => {
          if (res.data && res.data.jwt) {
            this.$http
              .get("https://www.bafang-electric.com:7777/api/testplans", {
                headers: {
                  jwt: res.data.jwt,
                },
              })
              .then((res) => {
                if (res.data && res.data.data && res.data.data.length > 0) {
                  res.data.data.forEach((item) => {
                    let testPlanItem = {
                      name: item.name,
                      id: item.testPlanId,
                      value: item.testPlanId,
                    };
                    this.testPlanList.push(testPlanItem);
                  });
                }
              })
              .catch((err) => {
                console.log(err);
              });
          }
        })
        .catch((err) => {
          console.log(err);
          this.$message({
            type: "warning",
            message: "登录失败",
          });
        });
    },

    addItems() {
      this.selectItems.forEach((item, index) => {
        if (item.selected === true) {
          let isAdded = false;
          this.orderItems.forEach((orderItem) => {
            if (orderItem.item_id === item.id) {
              isAdded = true;
            }
          });
          if (!isAdded) {
            let addItem = this.selectItems[index];
            this.orderItems.push({
              item_id: addItem.id,
              item_name: addItem.name,
              part_no: "",
              item_part_no: addItem.ext_part_no,
              amount: 1,
              selected: false,
            });
          }
        }
      });
      this.closeChooseItem();
    },

    closeChooseItem() {
      this.selectItems = [];
      this.queryItemList = [];
      this.queryItemCondition = "";
      //                this.dialogCreateVisible = false;
    },

    createOrder() {
      let orderItems = [];
      this.orderItems.forEach((orderItem) => {
        orderItems.push({
          id: orderItem.item_id,
          amount: orderItem.amount,
          part_no: orderItem.part_no,
        });
      });

      if (!this.checkParams()) {
        return;
      }
      let testPlanName = "";
      this.testPlanList.forEach((item) => {
        if (item.value === this.testPlan) {
          testPlanName = item.name;
        }
      });

      Core.Api.Order.productionOrderSave(
        this.orderId,
        this.poNo,
        this.customerName,
        this.systemName,
        this.customerPo,
        this.org.id,
        this.note,
        JSON.stringify(orderItems),
        this.testPlan,
        testPlanName
      ).then((res) => {
        this.$message({
          message: "Save Successfully",
          type: "success",
        });
        this.$router.push({ name: "componentOrderList" });
      });
    },
    checkParams() {
      if (!this.poNo) {
        this.$message({
          message: "Please input Po No.",
          type: "warning",
        });
        return false;
      }

      if (!this.customerName) {
        this.$message({
          message: "Please input customer name",
          type: "warning",
        });
        return false;
      }

      //                if (!this.customerPo) {
      //                    this.$message({
      //                        message: 'Please input customer Po',
      //                        type: 'warning'
      //                    });
      //                    return false;
      //                }

      if (!this.orderItems.length) {
        this.$message({
          message: "Please add item",
          type: "warning",
        });
        return false;
      }

      return true;
    },
    queryOrderItem() {
      let org = Core.Data.getOrg();
      let queryItemCondition = this.queryItemCondition.trim();
      if (org !== null) {
        Core.Api.Item.queryOrderItem(
          org.id,
          this.selectCategoryItem.id,
          "",
          queryItemCondition,
          this.currentPage
        ).then((res) => {
          this.queryItemList = res.query;
          this.total = res.count;
          if (!this.queryItemList.length > 0) {
            this.$message({
              message: "There are no matching data",
              type: "warning",
            });
            this.selectItems = [];
            return;
          }
          this.selectItems = [];
          this.queryItemList.forEach((item, index) => {
            let selectItem = {
              selected: false,
              key: index,
              name: item.name,
              img: item.img,
              ext_part_no: item.ext_part_no,
              id: item.id,
            };
            this.selectItems.push(selectItem);
          });
        });
      }
    },

    clearCondition() {
      this.selectItems = [];
      this.queryItemList = [];
      this.queryItemCondition = "";
      this.selectCategoryItem = "";
      this.total = 0;
      this.currentPage = 1;
    },

    deleteOrderItem() {
      let deleteIndexs = [];
      this.orderItems.forEach((orderItem, index) => {
        if (orderItem.selected === true) {
          deleteIndexs.unshift(index);
        }
      });
      deleteIndexs.forEach((index) => {
        this.orderItems.splice(index, 1);
      });
    },

    selectCategory() {
      this.dialogSelectCategoryVisible = true;
    },

    handleNodeClick(data) {
      if (data.hasOwnProperty("child")) {
        let childList = data.child;
        if (childList.length <= 0) {
          this.selectCategoryItem = data;
          this.dialogSelectCategoryVisible = false;
        }
      }
    },

    handleCurrentPageChange(page) {
      this.currentPage = page;
      this.queryOrderItem();
    },
  },
};
</script>

<style lang="scss" rel="stylesheet/scss">
.component-order-save {
  width: 100%;
  height: 100%;

  .table-wrap {
    width: 100%;
    height: calc(100% - 392px);
    box-shadow: 0 -1px #2b2f3b;
    overflow-x: hidden;
  }

  span.required {
    color: #e26829;
    display: inline-block;
  }

  .content {
    height: 100%;
    border: 1px solid #2b2f3b;
    .order-info {
      width: 100%;
      height: 272px;
      .title {
        height: 50px;
        line-height: 50px;
        padding-left: 40px;
        /*font-size: 12px;*/
      }
      .left {
        float: left;
        width: 100%;
        height: 170px;
        background: #353945;
        box-shadow: 0 -1px #2b2f3b;
        overflow: auto;
        .item {
          margin: 2px 0 0 40px;
          line-height: 60px;
          overflow: hidden;
          height: 50px;
          .label {
            display: inline-block;
            width: 110px;
          }
          .input {
            margin-left: 10px;
            width: 256px;
            border-radius: 0 0 10px 10px;
          }
          .input-left {
            margin-left: 10px;
            width: 200px;
          }
          .input-right {
            width: 200px;
          }
          .input-note {
            margin-left: 10px;
            width: 608px;
          }
        }
      }
      .parts-list {
        float: left;
        padding: 0 40px;
        font-size: 12px;
        overflow: hidden;
        height: 50px;
        line-height: 50px;
        width: 100%;
        box-shadow: 0 -1px #2b2f3b;
        .labelList {
          /*font-size: 12px;*/
        }
        .att-btn {
          margin-left: 46px;
          padding: 6px 9px;
          min-width: 0;
        }
        .labelAdd {
          margin-left: 14px;
          /*font-size: 12px;*/
        }
      }
    }
    .footer {
      width: 100%;
      height: 60px;
      line-height: 60px;
      padding-left: 40px;
      box-shadow: 0 -1px #2b2f3b;
      .footer-pagination {
        float: right;
      }
    }
  }
  .dialog {
    .el-dialog--large {
      width: 1100px;
    }
    .header {
      .search-content {
        width: 200px;
        margin-right: 10px;
      }
      .search-btn {
        position: absolute;
        top: 15px;
        left: 250px;
        width: 30px;
        height: 30px;
      }
    }
  }

  .table-wrap .table-content {
    padding-bottom: 0;
  }
  .pagination {
    padding: 10px;
  }
}
</style>



// WEBPACK FOOTER //
// save.vue?f33c0074