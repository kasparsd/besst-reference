module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "PI-header"
  }, [_c('div', {
    staticClass: "header"
  }, [_c('div', {
    staticClass: "btn-group-inline"
  }, [_c('div', {
    staticClass: "icons"
  }, [_c('div', {
    staticClass: "icon-item back",
    attrs: {
      "title": "back"
    },
    on: {
      "click": _vm.goPIList
    }
  })])]), _vm._v(" "), _c('label', {
    staticClass: "title"
  }, [_vm._v(_vm._s(_vm.orderId ? "Edit Proforma Invoice" : "Add Proforma Invoice"))])]), _vm._v(" "), _c('div', {
    staticClass: "content-wrap"
  }, [_c('div', {
    directives: [{
      name: "loading",
      rawName: "v-loading.body",
      value: (_vm.loading),
      expression: "loading",
      modifiers: {
        "body": true
      }
    }],
    staticClass: "content content-width"
  }, [_c('div', {
    staticClass: "order-info"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Proforma Invoice Info")]), _vm._v(" "), _c('div', {
    staticClass: "left"
  }, [_c('div', {
    staticClass: "item"
  }, [_vm._m(0), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "prepend",
      "filterable": "",
      "value-key": "id"
    },
    on: {
      "change": _vm.handleItemChange
    },
    slot: "prepend",
    model: {
      value: (_vm.formData.customer_id),
      callback: function($$v) {
        _vm.$set(_vm.formData, "customer_id", $$v)
      },
      expression: "formData.customer_id"
    }
  }, _vm._l((_vm.customerList), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  }), 1), _vm._v(" "), _c('a', {
    staticClass: "btn-underline",
    on: {
      "click": function($event) {
        $event.stopPropagation();
        return _vm.dialogAdd.apply(null, arguments)
      }
    }
  }, [_vm._v("Add")])], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(1), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "prepend",
      "name": "type",
      "filterable": "",
      "value-key": "id"
    },
    slot: "prepend",
    model: {
      value: (_vm.formData.type),
      callback: function($$v) {
        _vm.$set(_vm.formData, "type", $$v)
      },
      expression: "formData.type"
    }
  }, _vm._l((_vm.typeList), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  }), 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "label"
  }, [_vm._v("Customer Art Nr.")]), _vm._v(" "), _c('el-input', {
    staticClass: "input input-sn",
    attrs: {
      "placeholder": "Customer Art Nr."
    },
    on: {
      "change": function($event) {
        return _vm.getOrderInfo()
      }
    },
    model: {
      value: (_vm.formData.customer_order_no),
      callback: function($$v) {
        _vm.$set(_vm.formData, "customer_order_no", $$v)
      },
      expression: "formData.customer_order_no"
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(2), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "prepend",
      "filterable": "",
      "disabled": ""
    },
    slot: "prepend",
    model: {
      value: (_vm.formData.country),
      callback: function($$v) {
        _vm.$set(_vm.formData, "country", $$v)
      },
      expression: "formData.country"
    }
  }, _vm._l((_vm.areaCodeList), function(item) {
    return _c('el-option', {
      key: item.area_code,
      attrs: {
        "label": item.area_en,
        "value": item.area_en
      }
    })
  }), 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(3), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    attrs: {
      "placeholder": "Address",
      "disabled": true
    },
    model: {
      value: (_vm.formData.address),
      callback: function($$v) {
        _vm.$set(_vm.formData, "address", $$v)
      },
      expression: "formData.address"
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(4), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    attrs: {
      "disabled": true,
      "placeholder": "Tel"
    },
    model: {
      value: (_vm.formData.telephone),
      callback: function($$v) {
        _vm.$set(_vm.formData, "telephone", $$v)
      },
      expression: "formData.telephone"
    }
  }, [_c('el-select', {
    staticClass: "country-code",
    attrs: {
      "slot": "prepend",
      "filterable": "",
      "disabled": true
    },
    slot: "prepend",
    model: {
      value: (_vm.formData.country_code),
      callback: function($$v) {
        _vm.$set(_vm.formData, "country_code", $$v)
      },
      expression: "formData.country_code"
    }
  }, _vm._l((_vm.areaCodeList), function(item) {
    return _c('el-option', {
      key: item.area_code,
      attrs: {
        "label": item.area_code,
        "value": item.area_code
      }
    })
  }), 1)], 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(5), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    attrs: {
      "placeholder": "VAT No.",
      "disabled": ""
    },
    model: {
      value: (_vm.formData.vat_no),
      callback: function($$v) {
        _vm.$set(_vm.formData, "vat_no", $$v)
      },
      expression: "formData.vat_no"
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(6), _vm._v(" "), _c('el-date-picker', {
    staticClass: "input",
    attrs: {
      "type": "date",
      "placeholder": "ETD"
    },
    model: {
      value: (_vm.formData.etd),
      callback: function($$v) {
        _vm.$set(_vm.formData, "etd", $$v)
      },
      expression: "formData.etd"
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(7), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "append",
      "filterable": "",
      "disabled": ""
    },
    slot: "append",
    model: {
      value: (_vm.formData.trade_terms),
      callback: function($$v) {
        _vm.$set(_vm.formData, "trade_terms", $$v)
      },
      expression: "formData.trade_terms"
    }
  }, _vm._l((_vm.tradeTerms), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.label,
        "value": item.label
      }
    })
  }), 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(8), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "append",
      "filterable": "",
      "disabled": ""
    },
    slot: "append",
    model: {
      value: (_vm.formData.payment_term),
      callback: function($$v) {
        _vm.$set(_vm.formData, "payment_term", $$v)
      },
      expression: "formData.payment_term"
    }
  }, _vm._l((_vm.paymentTerms), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.label,
        "value": item.label
      }
    })
  }), 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(9), _vm._v(" "), _c('el-date-picker', {
    staticClass: "input",
    attrs: {
      "type": "date",
      "placeholder": "Date"
    },
    model: {
      value: (_vm.formData.date),
      callback: function($$v) {
        _vm.$set(_vm.formData, "date", $$v)
      },
      expression: "formData.date"
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(10), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "append"
    },
    slot: "append",
    model: {
      value: (_vm.formData.shipment),
      callback: function($$v) {
        _vm.$set(_vm.formData, "shipment", $$v)
      },
      expression: "formData.shipment"
    }
  }, _vm._l((_vm.shipmentTerms), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.label,
        "value": item.label
      }
    })
  }), 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(11), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "prepend",
      "filterable": ""
    },
    slot: "prepend",
    model: {
      value: (_vm.formData.origin),
      callback: function($$v) {
        _vm.$set(_vm.formData, "origin", $$v)
      },
      expression: "formData.origin"
    }
  }, _vm._l((_vm.areaCodeList), function(item) {
    return _c('el-option', {
      key: item.area_code,
      attrs: {
        "label": item.area_en,
        "value": item.area_en
      }
    })
  }), 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(12), _vm._v(" "), _c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "prepend",
      "filterable": ""
    },
    slot: "prepend",
    model: {
      value: (_vm.formData.destination),
      callback: function($$v) {
        _vm.$set(_vm.formData, "destination", $$v)
      },
      expression: "formData.destination"
    }
  }, _vm._l((_vm.areaCodeList), function(item) {
    return _c('el-option', {
      key: item.area_code,
      attrs: {
        "label": item.area_en,
        "value": item.area_en
      }
    })
  }), 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_vm._m(13), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    attrs: {
      "disabled": ""
    },
    model: {
      value: (_vm.formData.amount),
      callback: function($$v) {
        _vm.$set(_vm.formData, "amount", $$v)
      },
      expression: "formData.amount"
    }
  }, [_c('el-select', {
    attrs: {
      "slot": "prepend",
      "disabled": ""
    },
    slot: "prepend",
    model: {
      value: (_vm.formData.currency),
      callback: function($$v) {
        _vm.$set(_vm.formData, "currency", $$v)
      },
      expression: "formData.currency"
    }
  }, _vm._l((_vm.currencies), function(item) {
    return _c('el-option', {
      key: item.currency,
      attrs: {
        "label": item.label,
        "value": item.currency,
        "value-key": item.currency
      }
    })
  }), 1)], 1)], 1)])]), _vm._v(" "), _c('div', {
    staticClass: "table-wrap table-overflow"
  }, [_c('table', {
    staticClass: "table-content",
    attrs: {
      "border": "0",
      "cellspacing": "0",
      "cellpadding": "0"
    }
  }, [_c('thead', [_c('td', [_c('el-checkbox', {
    model: {
      value: (_vm.allSelectedForDelete),
      callback: function($$v) {
        _vm.allSelectedForDelete = $$v
      },
      expression: "allSelectedForDelete"
    }
  })], 1), _vm._v(" "), _vm._l((_vm.headData), function(item) {
    return _c('td', [_vm._v(_vm._s(item))])
  })], 2), _vm._v(" "), _c('tbody', _vm._l((_vm.orderItems), function(item, index) {
    return _c('tr', [_c('td', [_c('el-checkbox', {
      staticClass: "table-checkbox",
      model: {
        value: (item.selected),
        callback: function($$v) {
          _vm.$set(item, "selected", $$v)
        },
        expression: "item.selected"
      }
    })], 1), _vm._v(" "), _c('td', [_vm._v(_vm._s(item.model_name))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(item.bf_art_no))]), _vm._v(" "), _c('td', [_c('el-input', {
      attrs: {
        "placeholder": "Customer Art No."
      },
      model: {
        value: (item.customer_art_no),
        callback: function($$v) {
          _vm.$set(item, "customer_art_no", $$v)
        },
        expression: "item.customer_art_no"
      }
    })], 1), _vm._v(" "), _c('td', [_c('el-input', {
      attrs: {
        "placeholder": "Description"
      },
      model: {
        value: (item.description),
        callback: function($$v) {
          _vm.$set(item, "description", $$v)
        },
        expression: "item.description"
      }
    })], 1), _vm._v(" "), _c('td', [_c('el-input', {
      staticClass: "input",
      model: {
        value: (item.unit_price),
        callback: function($$v) {
          _vm.$set(item, "unit_price", $$v)
        },
        expression: "item.unit_price"
      }
    }, [_c('el-select', {
      staticClass: "currency-input",
      attrs: {
        "slot": "prepend"
      },
      slot: "prepend",
      model: {
        value: (_vm.formData.currency),
        callback: function($$v) {
          _vm.$set(_vm.formData, "currency", $$v)
        },
        expression: "formData.currency"
      }
    }, _vm._l((_vm.currencies), function(item) {
      return _c('el-option', {
        key: item.currency,
        attrs: {
          "label": item.label,
          "value": item.currency,
          "value-key": item.currency
        }
      })
    }), 1)], 1)], 1), _vm._v(" "), _c('td', [_c('el-input', {
      attrs: {
        "type": "number",
        "min": 0
      },
      on: {
        "change": function($event) {
          return _vm.vatRateRelation($event)
        }
      },
      model: {
        value: (item.vat_rate),
        callback: function($$v) {
          _vm.$set(item, "vat_rate", $$v)
        },
        expression: "item.vat_rate"
      }
    }), _vm._v("%\n              ")], 1), _vm._v(" "), _c('td', [_c('el-input-number', {
      staticClass: "input-number",
      attrs: {
        "min": 1
      },
      model: {
        value: (item.quantity),
        callback: function($$v) {
          _vm.$set(item, "quantity", $$v)
        },
        expression: "item.quantity"
      }
    })], 1), _vm._v(" "), _c('td', [_vm._v(_vm._s(item.amount))]), _vm._v(" "), _c('td', [_c('a', {
      staticClass: "btn-underline",
      on: {
        "click": function($event) {
          return _vm.deleteItem(item, index)
        }
      }
    }, [_vm._v(_vm._s(_vm.$t("delete")))])])])
  }), 0)])]), _vm._v(" "), _c('div', {
    staticClass: "parts-list"
  }, [_c('el-button', {
    staticClass: "att-btn",
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.dialogCreateVisible = true
      }
    }
  }, [_vm._v("+")]), _vm._v(" "), _c('span', {
    staticClass: "att-total"
  }, [_vm._v("total: " + _vm._s(_vm._f("currencyType")(_vm.formData.currency)) + _vm._s(_vm.totalCount))])], 1), _vm._v(" "), _c('div', {
    staticClass: "footer"
  }, [_c('el-button', {
    attrs: {
      "type": "delete"
    },
    on: {
      "click": _vm.deleteOrderItem
    }
  }, [_vm._v(_vm._s(_vm.$t("delete")))]), _vm._v(" "), _c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": _vm.onCreate
    }
  }, [_vm._v("Save")])], 1), _vm._v(" "), _c('el-dialog', {
    staticClass: "dialog",
    attrs: {
      "title": _vm.$t('addItem'),
      "visible": _vm.dialogCreateVisible,
      "size": "large",
      "top": "10%"
    },
    on: {
      "update:visible": function($event) {
        _vm.dialogCreateVisible = $event
      }
    }
  }, [_c('div', {
    staticClass: "content"
  }, [_c('div', {
    staticClass: "header"
  }, [_c('el-input', {
    staticClass: "search-content",
    attrs: {
      "placeholder": _vm.$t('category')
    },
    nativeOn: {
      "click": function($event) {
        return _vm.selectCategory.apply(null, arguments)
      }
    },
    model: {
      value: (_vm.selectCategoryItem.name),
      callback: function($$v) {
        _vm.$set(_vm.selectCategoryItem, "name", $$v)
      },
      expression: "selectCategoryItem.name"
    }
  }), _vm._v(" "), _c('el-input', {
    staticClass: "search-content",
    attrs: {
      "placeholder": _vm.$t('modelNamePN')
    },
    model: {
      value: (_vm.queryItemCondition),
      callback: function($$v) {
        _vm.queryItemCondition = $$v
      },
      expression: "queryItemCondition"
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "btn-group-inline"
  }, [_c('div', {
    staticClass: "icons"
  }, [_c('div', {
    staticClass: "icon-item search",
    attrs: {
      "title": _vm.$t('search')
    },
    on: {
      "click": _vm.queryOrderItem
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "icon-item clear",
    attrs: {
      "title": _vm.$t('clear')
    },
    on: {
      "click": _vm.clearCondition
    }
  })])])], 1), _vm._v(" "), _c('div', {
    staticClass: "table-wrap"
  }, [_c('table', {
    staticClass: "table-content",
    attrs: {
      "border": "0",
      "cellspacing": "0",
      "cellpadding": "0"
    }
  }, [_c('thead', [_c('td', [_c('el-checkbox', {
    model: {
      value: (_vm.allSelectedForAdd),
      callback: function($$v) {
        _vm.allSelectedForAdd = $$v
      },
      expression: "allSelectedForAdd"
    }
  })], 1), _vm._v(" "), _vm._l((_vm.itemHeadData), function(item) {
    return _c('td', [_vm._v(_vm._s(item))])
  })], 2), _vm._v(" "), _c('tbody', _vm._l((_vm.selectItems), function(item, index) {
    return _c('tr', [_c('td', [_c('el-checkbox', {
      staticClass: "table-checkbox",
      model: {
        value: (item.selected),
        callback: function($$v) {
          _vm.$set(item, "selected", $$v)
        },
        expression: "item.selected"
      }
    })], 1), _vm._v(" "), _c('td', [_c('img', {
      attrs: {
        "src": _vm._f("getImgUrl")(item.img)
      }
    })]), _vm._v(" "), _c('td', [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(item.ext_part_no))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(index + 1) + ".bin")])])
  }), 0)]), _vm._v(" "), _c('el-pagination', {
    staticClass: "pagination",
    attrs: {
      "current-page": _vm.currentPage,
      "page-size": 10,
      "layout": "prev, pager, next",
      "total": _vm.total
    },
    on: {
      "current-change": _vm.handleCurrentPageChange,
      "update:currentPage": function($event) {
        _vm.currentPage = $event
      },
      "update:current-page": function($event) {
        _vm.currentPage = $event
      }
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "footer"
  }, [_c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": _vm.addItems
    }
  }, [_vm._v(_vm._s(_vm.$t("addItems")))])], 1)])])], 1)]), _vm._v(" "), _c('el-dialog', {
    staticClass: "dialog",
    attrs: {
      "title": _vm.$t('selectCategory'),
      "visible": _vm.dialogSelectCategoryVisible,
      "size": "large"
    },
    on: {
      "update:visible": function($event) {
        _vm.dialogSelectCategoryVisible = $event
      }
    }
  }, [_c('div', {
    staticClass: "content",
    staticStyle: {
      "max-height": "500px",
      "overflow": "auto"
    }
  }, [_c('div', {
    staticClass: "category-tree"
  }, [_c('el-tree', {
    attrs: {
      "data": _vm.categoryList,
      "props": _vm.defaultProps
    },
    on: {
      "node-click": _vm.handleNodeClick
    }
  })], 1)])]), _vm._v(" "), _c('el-dialog', {
    staticClass: "dialog-md",
    attrs: {
      "title": _vm.dialogTitle,
      "visible": _vm.dialogCustomerVisible,
      "custom-class": "edit-dialog"
    },
    on: {
      "update:title": function($event) {
        _vm.dialogTitle = $event
      },
      "update:visible": function($event) {
        _vm.dialogCustomerVisible = $event
      }
    }
  }, [_c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Company Name\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    attrs: {
      "placeholder": "Name"
    },
    model: {
      value: (_vm.customeFormData.name),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "name", $$v)
      },
      expression: "customeFormData.name"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Customer No.\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    attrs: {
      "placeholder": "Nick name"
    },
    model: {
      value: (_vm.customeFormData.company_no),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "company_no", $$v)
      },
      expression: "customeFormData.company_no"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Currency\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-select', {
    staticClass: "input input-special",
    attrs: {
      "slot": "prepend"
    },
    slot: "prepend",
    model: {
      value: (_vm.customeFormData.currency),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "currency", $$v)
      },
      expression: "customeFormData.currency"
    }
  }, _vm._l((_vm.currencies), function(item) {
    return _c('el-option', {
      key: item.currency,
      attrs: {
        "label": item.label,
        "value": item.currency,
        "value-key": item.currency
      }
    })
  }), 1)], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Email\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    attrs: {
      "placeholder": "Service email"
    },
    model: {
      value: (_vm.customeFormData.email),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "email", $$v)
      },
      expression: "customeFormData.email"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Phone\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.customeFormData.mobile),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "mobile", $$v)
      },
      expression: "customeFormData.mobile"
    }
  }, [_c('el-select', {
    attrs: {
      "slot": "prepend",
      "filterable": ""
    },
    on: {
      "change": _vm.PhoneRelatedCountry
    },
    slot: "prepend",
    model: {
      value: (_vm.customeFormData.country_code),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "country_code", $$v)
      },
      expression: "customeFormData.country_code"
    }
  }, _vm._l((_vm.areaCodeList), function(item) {
    return _c('el-option', {
      key: item.area_code,
      attrs: {
        "label": item.area_code,
        "value": item.area_code
      }
    })
  }), 1)], 1)], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Country\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-select', {
    staticClass: "input input-special",
    attrs: {
      "slot": "prepend",
      "filterable": ""
    },
    on: {
      "change": _vm.CountryToPhone
    },
    slot: "prepend",
    model: {
      value: (_vm.customeFormData.country),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "country", $$v)
      },
      expression: "customeFormData.country"
    }
  }, _vm._l((_vm.areaCodeList), function(item, index) {
    return _c('el-option', {
      key: index,
      attrs: {
        "label": item.area_en,
        "value": item.area_en
      }
    })
  }), 1)], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Province")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.customeFormData.province),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "province", $$v)
      },
      expression: "customeFormData.province"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("City")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.customeFormData.city),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "city", $$v)
      },
      expression: "customeFormData.city"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("District")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.customeFormData.district),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "district", $$v)
      },
      expression: "customeFormData.district"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Address\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.customeFormData.address),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "address", $$v)
      },
      expression: "customeFormData.address"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Account No.\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    attrs: {
      "placeholder": "Account number"
    },
    model: {
      value: (_vm.customeFormData.account_no),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "account_no", $$v)
      },
      expression: "customeFormData.account_no"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("VAT No.")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    attrs: {
      "placeholder": "Customer company VAT.NO"
    },
    model: {
      value: (_vm.customeFormData.vat_no),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "vat_no", $$v)
      },
      expression: "customeFormData.vat_no"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Payment Method\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "prepend",
      "placeholder": "Select Payment Method",
      "filterable": ""
    },
    slot: "prepend",
    model: {
      value: (_vm.customeFormData.payment_method),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "payment_method", $$v)
      },
      expression: "customeFormData.payment_method"
    }
  }, _vm._l((_vm.paymentMethodData), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.label,
        "value": item.id
      }
    })
  }), 1)], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Trade Terms\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "append",
      "placeholder": "Select Trade Terms",
      "filterable": ""
    },
    slot: "append",
    model: {
      value: (_vm.customeFormData.trade_term),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "trade_term", $$v)
      },
      expression: "customeFormData.trade_term"
    }
  }, _vm._l((_vm.tradeTerms), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.label,
        "value": item.label
      }
    })
  }), 1)], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Payment Term\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-select', {
    staticClass: "input",
    attrs: {
      "slot": "append",
      "placeholder": "Select Payment Term",
      "filterable": ""
    },
    slot: "append",
    model: {
      value: (_vm.customeFormData.payment_term),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "payment_term", $$v)
      },
      expression: "customeFormData.payment_term"
    }
  }, _vm._l((_vm.paymentTerms), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.label,
        "value": item.label
      }
    })
  }), 1)], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("\n        Receiver Name\n        "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    attrs: {
      "placeholder": "Company contact"
    },
    model: {
      value: (_vm.customeFormData.receiver_name),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "receiver_name", $$v)
      },
      expression: "customeFormData.receiver_name"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('el-tooltip', {
    attrs: {
      "effect": "dark",
      "content": "The bigger the number, the better the quota",
      "placement": "top"
    }
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Credit Line")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input-number', {
    staticClass: "input input-special",
    attrs: {
      "min": 1
    },
    model: {
      value: (_vm.customeFormData.credit_line),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "credit_line", $$v)
      },
      expression: "customeFormData.credit_line"
    }
  })], 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('el-tooltip', {
    attrs: {
      "effect": "dark",
      "content": "The bigger the number, the better the credit",
      "placement": "top-start"
    }
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Credit Grade")])]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input-number', {
    staticClass: "input input-special",
    attrs: {
      "min": 1
    },
    model: {
      value: (_vm.customeFormData.credit_grade),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "credit_grade", $$v)
      },
      expression: "customeFormData.credit_grade"
    }
  })], 1)], 1), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Service level")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input-number', {
    staticClass: "input input-special",
    attrs: {
      "min": 1
    },
    model: {
      value: (_vm.customeFormData.star),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "star", $$v)
      },
      expression: "customeFormData.star"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Remark")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.customeFormData.remark),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "remark", $$v)
      },
      expression: "customeFormData.remark"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Order Memo")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.customeFormData.order_memo),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "order_memo", $$v)
      },
      expression: "customeFormData.order_memo"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "item"
  }, [_c('label', {
    staticClass: "title"
  }, [_vm._v("Telephone")]), _vm._v(" "), _c('div', {
    staticClass: "content"
  }, [_c('el-input', {
    staticClass: "input",
    attrs: {
      "min": 1
    },
    model: {
      value: (_vm.customeFormData.telephone),
      callback: function($$v) {
        _vm.$set(_vm.customeFormData, "telephone", $$v)
      },
      expression: "customeFormData.telephone"
    }
  })], 1)]), _vm._v(" "), _c('div', {
    staticClass: "dialog-footer",
    attrs: {
      "slot": "footer"
    },
    slot: "footer"
  }, [_c('el-button', {
    attrs: {
      "type": "preview"
    },
    on: {
      "click": _vm.dialogConfirm
    }
  }, [_vm._v("confirm")]), _vm._v(" "), _c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": _vm.dialogCancel
    }
  }, [_vm._v("cancel")])], 1)])], 1)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Customer\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Type\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Country\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Address\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Tel\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              VAT No.\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              ETD\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Trade Terms\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Payment Term\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Date\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Shipment\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Ship from\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Ship to\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    staticClass: "label"
  }, [_vm._v("\n              Currency/Amount\n              "), _c('span', {
    staticClass: "required"
  }, [_vm._v("*")])])
}]}


//////////////////
// WEBPACK FOOTER
// ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-dc435568","hasScoped":false}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/nl/sales/proforma-invoice-header.vue
// module id = 2602
// module chunks = 24