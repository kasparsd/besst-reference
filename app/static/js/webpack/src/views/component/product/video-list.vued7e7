module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "video-list"
  }, [_c('div', {
    staticClass: "header"
  }, [_c('div', {
    staticClass: "btn-group-inline"
  }, [_c('div', {
    staticClass: "icons"
  }, [_c('div', {
    staticClass: "icon-item back",
    attrs: {
      "title": _vm.$t('back')
    },
    on: {
      "click": function($event) {
        return _vm.$router.back()
      }
    }
  })])]), _vm._v(" "), _c('label', {
    staticClass: "head-text"
  }, [_vm._v(_vm._s(_vm.$t("category")))]), _vm._v(" "), _c('el-select', {
    staticClass: "select",
    attrs: {
      "slot": "append"
    },
    on: {
      "change": _vm.changeCategory
    },
    slot: "append",
    model: {
      value: (_vm.category),
      callback: function($$v) {
        _vm.category = $$v
      },
      expression: "category"
    }
  }, [_vm._l((_vm.categoryOptions[0].options), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  }), _vm._v(" "), _c('el-option-group', {
    key: _vm.categoryOptions[1].label,
    attrs: {
      "label": _vm.categoryOptions[1].label
    }
  }, _vm._l((_vm.categoryOptions[1].options), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  }), 1), _vm._v(" "), _vm._l((_vm.categoryOptions[2].options), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  })], 2), _vm._v(" "), _c('div', {
    staticClass: "btn-group-top"
  }, [_c('div', {
    staticClass: "icons"
  }, [_c('div', {
    staticClass: "icon-item add",
    attrs: {
      "title": _vm.$t('add')
    },
    on: {
      "click": function($event) {
        _vm.uploadDialogVisible = true
      }
    }
  })])])], 1), _vm._v(" "), _c('div', {
    staticClass: "table-wrap"
  }, [_c('table', {
    staticClass: "table-content",
    attrs: {
      "border": "0",
      "cellspacing": "0",
      "cellpadding": "0"
    }
  }, [_c('thead', [_c('tr', _vm._l((_vm.tableHead), function(item) {
    return _c('td', [_vm._v("\n            " + _vm._s(item) + "\n          ")])
  }), 0)]), _vm._v(" "), _c('tbody', _vm._l((_vm.videoList), function(item) {
    return _c('tr', [_c('td', [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(_vm._f("videoCategoryType")(item.category)))]), _vm._v(" "), _c('td', [_c('a', {
      staticClass: "btn-underline",
      on: {
        "click": function($event) {
          return _vm.preview(item)
        }
      }
    }, [_vm._v(_vm._s(_vm.$t("preview")))]), _vm._v(" "), _c('a', {
      staticClass: "btn-underline",
      on: {
        "click": function($event) {
          return _vm.showEditDialog(item)
        }
      }
    }, [_vm._v(_vm._s(_vm.$t("edit")))]), _vm._v(" "), _c('a', {
      staticClass: "btn-underline",
      on: {
        "click": function($event) {
          return _vm.showDeleteDialog(item)
        }
      }
    }, [_vm._v(_vm._s(_vm.$t("delete")))])])])
  }), 0)]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.videoList.length <= 0),
      expression: "videoList.length <= 0"
    }],
    staticClass: "no-data-content"
  }, [_vm._v("\n      " + _vm._s(_vm.$t("noResult")) + "\n    ")]), _vm._v(" "), (_vm.loading) ? _c('div', {
    staticClass: "loading"
  }, [_c('img', {
    attrs: {
      "src": require("../../../assets/images/icon/loading-bars.svg"),
      "alt": "Loading icon"
    }
  })]) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "table-footer"
  }, [(_vm.footerShow) ? _c('el-pagination', {
    attrs: {
      "current-page": _vm.currentPage,
      "page-size": 10,
      "layout": "prev, pager, next",
      "total": _vm.total
    },
    on: {
      "current-change": _vm.handleCurrentChange,
      "update:currentPage": function($event) {
        _vm.currentPage = $event
      },
      "update:current-page": function($event) {
        _vm.currentPage = $event
      }
    }
  }) : _vm._e(), _vm._v(" "), _c('p', {
    staticClass: "total"
  }, [_vm._v(_vm._s(_vm.$t("total")) + ": " + _vm._s(_vm.total))])], 1)]), _vm._v(" "), _c('el-dialog', {
    attrs: {
      "title": _vm.$t('uploadVideo'),
      "visible": _vm.uploadDialogVisible,
      "before-close": _vm.closeUploadDialog
    },
    on: {
      "update:visible": function($event) {
        _vm.uploadDialogVisible = $event
      }
    }
  }, [_c('div', [_c('div', [_c('label', {
    staticClass: "label"
  }, [_vm._v(_vm._s(_vm.$t("category")))]), _vm._v(" "), _c('el-select', {
    staticClass: "select",
    attrs: {
      "slot": "append"
    },
    slot: "append",
    model: {
      value: (_vm.uploadCategory),
      callback: function($$v) {
        _vm.uploadCategory = $$v
      },
      expression: "uploadCategory"
    }
  }, [_c('el-option-group', {
    key: _vm.categoryOptions[1].label,
    attrs: {
      "label": _vm.categoryOptions[1].label
    }
  }, _vm._l((_vm.categoryOptions[1].options), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  }), 1), _vm._v(" "), _vm._l((_vm.categoryOptions[2].options), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  })], 2)], 1), _vm._v(" "), _c('div', {
    staticClass: "clear-20"
  }), _vm._v(" "), (_vm.uploadCategory == 1 || _vm.uploadCategory == 2) ? _c('div', [_c('label', {
    staticClass: "label"
  }, [_vm._v(_vm._s(_vm.$t("errorCode")))]), _vm._v(" "), _c('el-select', {
    staticClass: "select",
    attrs: {
      "slot": "append"
    },
    slot: "append",
    model: {
      value: (_vm.errorCodeId),
      callback: function($$v) {
        _vm.errorCodeId = $$v
      },
      expression: "errorCodeId"
    }
  }, _vm._l((_vm.errorCodeList), function(item) {
    return _c('el-option', {
      key: item.id,
      attrs: {
        "label": item.name,
        "value": item.id
      }
    })
  }), 1)], 1) : _vm._e(), _vm._v(" "), (_vm.uploadCategory == 1 || _vm.uploadCategory == 2) ? _c('div', {
    staticClass: "clear-20"
  }) : _vm._e(), _vm._v(" "), _c('label', {
    staticClass: "label"
  }, [_vm._v(_vm._s(_vm.$t("name")))]), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.videoForm.name),
      callback: function($$v) {
        _vm.$set(_vm.videoForm, "name", $$v)
      },
      expression: "videoForm.name"
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "clear-20"
  }), _vm._v(" "), _c('label', {
    staticClass: "label"
  }, [_vm._v(_vm._s(_vm.$t("link")))]), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.videoForm.link),
      callback: function($$v) {
        _vm.$set(_vm.videoForm, "link", $$v)
      },
      expression: "videoForm.link"
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "dialog-footer",
    attrs: {
      "slot": "footer"
    },
    slot: "footer"
  }, [_c('el-button', {
    attrs: {
      "type": "preview"
    },
    on: {
      "click": _vm.saveVideo
    }
  }, [_vm._v(" " + _vm._s(_vm.$t("confirm")))]), _vm._v(" "), _c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.uploadDialogVisible = false
      }
    }
  }, [_vm._v("\n        " + _vm._s(_vm.$t("cancel")))])], 1)]), _vm._v(" "), _c('el-dialog', {
    attrs: {
      "title": _vm.$t('edit'),
      "visible": _vm.editDialogVisible,
      "before-close": _vm.closeUploadDialog
    },
    on: {
      "update:visible": function($event) {
        _vm.editDialogVisible = $event
      }
    }
  }, [_c('div', [_c('label', {
    staticClass: "label"
  }, [_vm._v(_vm._s(_vm.$t("name")))]), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.videoForm.name),
      callback: function($$v) {
        _vm.$set(_vm.videoForm, "name", $$v)
      },
      expression: "videoForm.name"
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "clear-20"
  }), _vm._v(" "), _c('label', {
    staticClass: "label"
  }, [_vm._v(_vm._s(_vm.$t("link")))]), _vm._v(" "), _c('el-input', {
    staticClass: "input",
    model: {
      value: (_vm.videoForm.link),
      callback: function($$v) {
        _vm.$set(_vm.videoForm, "link", $$v)
      },
      expression: "videoForm.link"
    }
  })], 1), _vm._v(" "), _c('div', {
    staticClass: "dialog-footer",
    attrs: {
      "slot": "footer"
    },
    slot: "footer"
  }, [_c('el-button', {
    attrs: {
      "type": "preview"
    },
    on: {
      "click": _vm.editVideo
    }
  }, [_vm._v(" " + _vm._s(_vm.$t("confirm")))]), _vm._v(" "), _c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.editDialogVisible = false
      }
    }
  }, [_vm._v("\n        " + _vm._s(_vm.$t("cancel")))])], 1)]), _vm._v(" "), _c('el-dialog', {
    attrs: {
      "title": _vm.$t('deleteVideo'),
      "visible": _vm.videoListDeleteDialogVisible,
      "size": "tiny"
    },
    on: {
      "update:visible": function($event) {
        _vm.videoListDeleteDialogVisible = $event
      }
    }
  }, [_c('p', [_vm._v(_vm._s(_vm.$t("deleteTip")))]), _vm._v(" "), _c('div', {
    staticClass: "dialog-footer",
    attrs: {
      "slot": "footer"
    },
    slot: "footer"
  }, [_c('el-button', {
    attrs: {
      "type": "preview"
    },
    on: {
      "click": _vm.deleteVideo
    }
  }, [_vm._v(_vm._s(_vm.$t("yes")))]), _vm._v(" "), _c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": function($event) {
        _vm.videoListDeleteDialogVisible = false
      }
    }
  }, [_vm._v(_vm._s(_vm.$t("no")))])], 1)]), _vm._v(" "), _c('el-dialog', {
    attrs: {
      "title": _vm.selectVideo.name,
      "custom-class": "video-dialog",
      "visible": _vm.dialogPreviewVisible,
      "before-close": _vm.closeVideoDialog
    },
    on: {
      "update:visible": function($event) {
        _vm.dialogPreviewVisible = $event
      }
    }
  }, [_c('div', {
    staticClass: "dialog-container"
  }, [_c('div', {
    staticStyle: {
      "position": "fixed",
      "bottom": "-40px",
      "width": "100%",
      "height": "40px",
      "z-index": "100",
      "background-color": "rgba(42, 46, 58, 0.3)"
    }
  }), _vm._v(" "), (_vm.dialogPreviewVisible) ? _c('iframe', {
    staticClass: "video-iframe",
    attrs: {
      "src": _vm.selectVideo.file,
      "frameborder": "0",
      "visible": _vm.dialogPreviewVisible,
      "click": _vm.youTube(),
      "id": "show-iframe",
      "width": "900",
      "scrolling": "no",
      "height": "600",
      "allowtransparency": ""
    },
    on: {
      "update:visible": function($event) {
        _vm.dialogPreviewVisible = $event
      }
    }
  }) : _vm._e(), _vm._v(" "), _c('div', {
    staticStyle: {
      "position": "fixed",
      "bottom": "-360px",
      "width": "100%",
      "height": "40px",
      "z-index": "100",
      "background-color": "rgba(42, 46, 58, 0.3)"
    }
  })])])], 1)
},staticRenderFns: []}


//////////////////
// WEBPACK FOOTER
// ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-1534e1f8","hasScoped":false}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/component/product/video-list.vue
// module id = 1953
// module chunks = 76